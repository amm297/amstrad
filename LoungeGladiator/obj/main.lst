                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Sep 22 2015) (CYGWIN)
                              4 ; This file was generated Thu Oct  1 16:38:38 2015
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _game
                             14 	.globl _checkSprite
                             15 	.globl _checkCollisions
                             16 	.globl _menu
                             17 	.globl _init
                             18 	.globl _cpct_getScreenPtr
                             19 	.globl _cpct_setPalette
                             20 	.globl _cpct_fw2hw
                             21 	.globl _cpct_waitVSYNC
                             22 	.globl _cpct_setVideoMode
                             23 	.globl _cpct_drawStringM0
                             24 	.globl _cpct_drawSolidBox
                             25 	.globl _cpct_drawSpriteMasked
                             26 	.globl _cpct_isKeyPressed
                             27 	.globl _cpct_scanKeyboard_f
                             28 	.globl _cpct_memset
                             29 	.globl _cpct_disableFirmware
                             30 	.globl _g_palette
                             31 ;--------------------------------------------------------
                             32 ; special function registers
                             33 ;--------------------------------------------------------
                             34 ;--------------------------------------------------------
                             35 ; ram data
                             36 ;--------------------------------------------------------
                             37 	.area _DATA
                             38 ;--------------------------------------------------------
                             39 ; ram data
                             40 ;--------------------------------------------------------
                             41 	.area _INITIALIZED
                             42 ;--------------------------------------------------------
                             43 ; absolute external ram data
                             44 ;--------------------------------------------------------
                             45 	.area _DABS (ABS)
                             46 ;--------------------------------------------------------
                             47 ; global & static initialisations
                             48 ;--------------------------------------------------------
                             49 	.area _HOME
                             50 	.area _GSINIT
                             51 	.area _GSFINAL
                             52 	.area _GSINIT
                             53 ;--------------------------------------------------------
                             54 ; Home
                             55 ;--------------------------------------------------------
                             56 	.area _HOME
                             57 	.area _HOME
                             58 ;--------------------------------------------------------
                             59 ; code
                             60 ;--------------------------------------------------------
                             61 	.area _CODE
                             62 ;src/main.c:40: void init(){
                             63 ;	---------------------------------
                             64 ; Function init
                             65 ; ---------------------------------
   0000                      66 _init::
                             67 ;src/main.c:41: cpct_disableFirmware();
   0000 CDr00r00      [17]   68 	call	_cpct_disableFirmware
                             69 ;src/main.c:42: cpct_setVideoMode(0);
   0003 AF            [ 4]   70 	xor	a, a
   0004 F5            [11]   71 	push	af
   0005 33            [ 6]   72 	inc	sp
   0006 CDr00r00      [17]   73 	call	_cpct_setVideoMode
   0009 33            [ 6]   74 	inc	sp
                             75 ;src/main.c:43: cpct_fw2hw(g_palette,4);
   000A 11r25r00      [10]   76 	ld	de,#_g_palette
   000D 3E 04         [ 7]   77 	ld	a,#0x04
   000F F5            [11]   78 	push	af
   0010 33            [ 6]   79 	inc	sp
   0011 D5            [11]   80 	push	de
   0012 CDr00r00      [17]   81 	call	_cpct_fw2hw
   0015 F1            [10]   82 	pop	af
   0016 33            [ 6]   83 	inc	sp
                             84 ;src/main.c:44: cpct_setPalette(g_palette,4);
   0017 11r25r00      [10]   85 	ld	de,#_g_palette
   001A 3E 04         [ 7]   86 	ld	a,#0x04
   001C F5            [11]   87 	push	af
   001D 33            [ 6]   88 	inc	sp
   001E D5            [11]   89 	push	de
   001F CDr00r00      [17]   90 	call	_cpct_setPalette
   0022 F1            [10]   91 	pop	af
   0023 33            [ 6]   92 	inc	sp
   0024 C9            [10]   93 	ret
   0025                      94 _g_palette:
   0025 00                   95 	.db #0x00	; 0
   0026 1A                   96 	.db #0x1A	; 26
   0027 06                   97 	.db #0x06	; 6
   0028 12                   98 	.db #0x12	; 18
                             99 ;src/main.c:48: void menu(){
                            100 ;	---------------------------------
                            101 ; Function menu
                            102 ; ---------------------------------
   0029                     103 _menu::
                            104 ;src/main.c:50: cpct_clearScreen(0);
   0029 21 00 40      [10]  105 	ld	hl,#0x4000
   002C E5            [11]  106 	push	hl
   002D AF            [ 4]  107 	xor	a, a
   002E F5            [11]  108 	push	af
   002F 33            [ 6]  109 	inc	sp
   0030 26 C0         [ 7]  110 	ld	h, #0xC0
   0032 E5            [11]  111 	push	hl
   0033 CDr00r00      [17]  112 	call	_cpct_memset
                            113 ;src/main.c:52: memptr = cpct_getScreenPtr(VMEM,20,10);
   0036 21 14 0A      [10]  114 	ld	hl,#0x0A14
   0039 E5            [11]  115 	push	hl
   003A 21 00 C0      [10]  116 	ld	hl,#0xC000
   003D E5            [11]  117 	push	hl
   003E CDr00r00      [17]  118 	call	_cpct_getScreenPtr
                            119 ;src/main.c:53: cpct_drawStringM0("Super Menu",memptr,2,3);
   0041 EB            [ 4]  120 	ex	de,hl
   0042 01r7Er00      [10]  121 	ld	bc,#___str_0+0
   0045 21 02 03      [10]  122 	ld	hl,#0x0302
   0048 E5            [11]  123 	push	hl
   0049 D5            [11]  124 	push	de
   004A C5            [11]  125 	push	bc
   004B CDr00r00      [17]  126 	call	_cpct_drawStringM0
   004E 21 06 00      [10]  127 	ld	hl,#6
   0051 39            [11]  128 	add	hl,sp
   0052 F9            [ 6]  129 	ld	sp,hl
                            130 ;src/main.c:55: memptr = cpct_getScreenPtr(VMEM,18,180);
   0053 21 12 B4      [10]  131 	ld	hl,#0xB412
   0056 E5            [11]  132 	push	hl
   0057 21 00 C0      [10]  133 	ld	hl,#0xC000
   005A E5            [11]  134 	push	hl
   005B CDr00r00      [17]  135 	call	_cpct_getScreenPtr
                            136 ;src/main.c:56: cpct_drawStringM0("Pulsa Intro",memptr,4,5);
   005E EB            [ 4]  137 	ex	de,hl
   005F 01r89r00      [10]  138 	ld	bc,#___str_1+0
   0062 21 04 05      [10]  139 	ld	hl,#0x0504
   0065 E5            [11]  140 	push	hl
   0066 D5            [11]  141 	push	de
   0067 C5            [11]  142 	push	bc
   0068 CDr00r00      [17]  143 	call	_cpct_drawStringM0
   006B 21 06 00      [10]  144 	ld	hl,#6
   006E 39            [11]  145 	add	hl,sp
   006F F9            [ 6]  146 	ld	sp,hl
                            147 ;src/main.c:58: do{
   0070                     148 00101$:
                            149 ;src/main.c:59: cpct_scanKeyboard_f();
   0070 CDr00r00      [17]  150 	call	_cpct_scanKeyboard_f
                            151 ;src/main.c:60: }while(!cpct_isKeyPressed(Key_Enter));
   0073 21 00 40      [10]  152 	ld	hl,#0x4000
   0076 CDr00r00      [17]  153 	call	_cpct_isKeyPressed
   0079 7D            [ 4]  154 	ld	a,l
   007A B7            [ 4]  155 	or	a, a
   007B 28 F3         [12]  156 	jr	Z,00101$
   007D C9            [10]  157 	ret
   007E                     158 ___str_0:
   007E 53 75 70 65 72 20   159 	.ascii "Super Menu"
        4D 65 6E 75
   0088 00                  160 	.db 0x00
   0089                     161 ___str_1:
   0089 50 75 6C 73 61 20   162 	.ascii "Pulsa Intro"
        49 6E 74 72 6F
   0094 00                  163 	.db 0x00
                            164 ;src/main.c:65: u8* checkCollisions(u8 pX, u8 pY, u8 eX, u8 eY, u8* dir, u8* atk){
                            165 ;	---------------------------------
                            166 ; Function checkCollisions
                            167 ; ---------------------------------
   0095                     168 _checkCollisions::
   0095 DD E5         [15]  169 	push	ix
   0097 DD 21 00 00   [14]  170 	ld	ix,#0
   009B DD 39         [15]  171 	add	ix,sp
                            172 ;src/main.c:68: if(eX - pX > -1 && eX - pX < 11)
   009D DD 4E 06      [19]  173 	ld	c,6 (ix)
   00A0 06 00         [ 7]  174 	ld	b,#0x00
   00A2 DD 6E 04      [19]  175 	ld	l,4 (ix)
   00A5 26 00         [ 7]  176 	ld	h,#0x00
   00A7 79            [ 4]  177 	ld	a,c
   00A8 95            [ 4]  178 	sub	a, l
   00A9 5F            [ 4]  179 	ld	e,a
   00AA 78            [ 4]  180 	ld	a,b
   00AB 9C            [ 4]  181 	sbc	a, h
   00AC 57            [ 4]  182 	ld	d,a
                            183 ;src/main.c:66: if(atk >= 21)
   00AD DD 7E 0A      [19]  184 	ld	a,10 (ix)
   00B0 D6 15         [ 7]  185 	sub	a, #0x15
   00B2 DD 7E 0B      [19]  186 	ld	a,11 (ix)
   00B5 DE 00         [ 7]  187 	sbc	a, #0x00
   00B7 38 4F         [12]  188 	jr	C,00116$
                            189 ;src/main.c:67: if(dir == 0)
   00B9 DD 7E 09      [19]  190 	ld	a,9 (ix)
   00BC DD B6 08      [19]  191 	or	a,8 (ix)
   00BF 20 21         [12]  192 	jr	NZ,00110$
                            193 ;src/main.c:68: if(eX - pX > -1 && eX - pX < 11)
   00C1 3E FF         [ 7]  194 	ld	a,#0xFF
   00C3 BB            [ 4]  195 	cp	a, e
   00C4 9A            [ 4]  196 	sbc	a, d
   00C5 E2rCAr00      [10]  197 	jp	PO, 00152$
   00C8 EE 80         [ 7]  198 	xor	a, #0x80
   00CA                     199 00152$:
   00CA F2rDDr00      [10]  200 	jp	P,00102$
   00CD 7B            [ 4]  201 	ld	a,e
   00CE D6 0B         [ 7]  202 	sub	a, #0x0B
   00D0 7A            [ 4]  203 	ld	a,d
   00D1 17            [ 4]  204 	rla
   00D2 3F            [ 4]  205 	ccf
   00D3 1F            [ 4]  206 	rra
   00D4 DE 80         [ 7]  207 	sbc	a, #0x80
   00D6 30 05         [12]  208 	jr	NC,00102$
                            209 ;src/main.c:69: return 1;
   00D8 21 01 00      [10]  210 	ld	hl,#0x0001
   00DB 18 49         [12]  211 	jr	00118$
   00DD                     212 00102$:
                            213 ;src/main.c:71: return 0;
   00DD 21 00 00      [10]  214 	ld	hl,#0x0000
   00E0 18 44         [12]  215 	jr	00118$
   00E2                     216 00110$:
                            217 ;src/main.c:73: if(pX - eX > -1 && pX - eX < 11)
   00E2 BF            [ 4]  218 	cp	a, a
   00E3 ED 42         [15]  219 	sbc	hl, bc
   00E5 3E FF         [ 7]  220 	ld	a,#0xFF
   00E7 BD            [ 4]  221 	cp	a, l
   00E8 9C            [ 4]  222 	sbc	a, h
   00E9 E2rEEr00      [10]  223 	jp	PO, 00153$
   00EC EE 80         [ 7]  224 	xor	a, #0x80
   00EE                     225 00153$:
   00EE F2r03r01      [10]  226 	jp	P,00106$
   00F1 11 0B 80      [10]  227 	ld	de, #0x800B
   00F4 29            [11]  228 	add	hl, hl
   00F5 3F            [ 4]  229 	ccf
   00F6 CB 1C         [ 8]  230 	rr	h
   00F8 CB 1D         [ 8]  231 	rr	l
   00FA ED 52         [15]  232 	sbc	hl, de
   00FC 30 05         [12]  233 	jr	NC,00106$
                            234 ;src/main.c:74: return 1;
   00FE 21 01 00      [10]  235 	ld	hl,#0x0001
   0101 18 23         [12]  236 	jr	00118$
   0103                     237 00106$:
                            238 ;src/main.c:76: return 0;
   0103 21 00 00      [10]  239 	ld	hl,#0x0000
   0106 18 1E         [12]  240 	jr	00118$
   0108                     241 00116$:
                            242 ;src/main.c:78: if(eX - pX > 0 && eX - pX < 4)
   0108 AF            [ 4]  243 	xor	a, a
   0109 BB            [ 4]  244 	cp	a, e
   010A 9A            [ 4]  245 	sbc	a, d
   010B E2r10r01      [10]  246 	jp	PO, 00154$
   010E EE 80         [ 7]  247 	xor	a, #0x80
   0110                     248 00154$:
   0110 F2r23r01      [10]  249 	jp	P,00117$
   0113 7B            [ 4]  250 	ld	a,e
   0114 D6 04         [ 7]  251 	sub	a, #0x04
   0116 7A            [ 4]  252 	ld	a,d
   0117 17            [ 4]  253 	rla
   0118 3F            [ 4]  254 	ccf
   0119 1F            [ 4]  255 	rra
   011A DE 80         [ 7]  256 	sbc	a, #0x80
   011C 30 05         [12]  257 	jr	NC,00117$
                            258 ;src/main.c:79: return 2;
   011E 21 02 00      [10]  259 	ld	hl,#0x0002
   0121 18 03         [12]  260 	jr	00118$
   0123                     261 00117$:
                            262 ;src/main.c:81: return 0;
   0123 21 00 00      [10]  263 	ld	hl,#0x0000
   0126                     264 00118$:
   0126 DD E1         [14]  265 	pop	ix
   0128 C9            [10]  266 	ret
                            267 ;src/main.c:84: u8* checkSprite(u8* atk, u8* dir){
                            268 ;	---------------------------------
                            269 ; Function checkSprite
                            270 ; ---------------------------------
   0129                     271 _checkSprite::
                            272 ;src/main.c:85: if(atk <= 20)
   0129 3E 14         [ 7]  273 	ld	a,#0x14
   012B FD 21 02 00   [14]  274 	ld	iy,#2
   012F FD 39         [15]  275 	add	iy,sp
   0131 FD BE 00      [19]  276 	cp	a, 0 (iy)
   0134 3E 00         [ 7]  277 	ld	a,#0x00
   0136 FD 9E 01      [19]  278 	sbc	a, 1 (iy)
   0139 38 11         [12]  279 	jr	C,00108$
                            280 ;src/main.c:86: if(dir == 0)
   013B 21 05 00      [10]  281 	ld	hl, #4+1
   013E 39            [11]  282 	add	hl, sp
   013F 7E            [ 7]  283 	ld	a, (hl)
   0140 2B            [ 6]  284 	dec	hl
   0141 B6            [ 7]  285 	or	a,(hl)
   0142 20 04         [12]  286 	jr	NZ,00102$
                            287 ;src/main.c:87: return gladis_quieto_dcha;
   0144 21r00r00      [10]  288 	ld	hl,#_gladis_quieto_dcha
   0147 C9            [10]  289 	ret
   0148                     290 00102$:
                            291 ;src/main.c:89: return gladis_quieto_izda;
   0148 21r00r00      [10]  292 	ld	hl,#_gladis_quieto_izda
   014B C9            [10]  293 	ret
   014C                     294 00108$:
                            295 ;src/main.c:90: else if(dir == 0){
   014C 21 05 00      [10]  296 	ld	hl, #4+1
   014F 39            [11]  297 	add	hl, sp
   0150 7E            [ 7]  298 	ld	a, (hl)
   0151 2B            [ 6]  299 	dec	hl
   0152 B6            [ 7]  300 	or	a,(hl)
   0153 20 04         [12]  301 	jr	NZ,00105$
                            302 ;src/main.c:91: return gladis_atk_dcha;
   0155 21r00r00      [10]  303 	ld	hl,#_gladis_atk_dcha
   0158 C9            [10]  304 	ret
   0159                     305 00105$:
                            306 ;src/main.c:93: return gladis_atk_izda;
   0159 21r00r00      [10]  307 	ld	hl,#_gladis_atk_izda
   015C C9            [10]  308 	ret
                            309 ;src/main.c:99: void game(){
                            310 ;	---------------------------------
                            311 ; Function game
                            312 ; ---------------------------------
   015D                     313 _game::
   015D DD E5         [15]  314 	push	ix
   015F DD 21 00 00   [14]  315 	ld	ix,#0
   0163 DD 39         [15]  316 	add	ix,sp
   0165 21 E4 FF      [10]  317 	ld	hl,#-28
   0168 39            [11]  318 	add	hl,sp
   0169 F9            [ 6]  319 	ld	sp,hl
                            320 ;src/main.c:100: TPlayer p = { 0,100 };
   016A 21 05 00      [10]  321 	ld	hl,#0x0005
   016D 39            [11]  322 	add	hl,sp
   016E 36 00         [10]  323 	ld	(hl),#0x00
   0170 21 05 00      [10]  324 	ld	hl,#0x0005
   0173 39            [11]  325 	add	hl,sp
   0174 DD 75 F3      [19]  326 	ld	-13 (ix),l
   0177 DD 74 F4      [19]  327 	ld	-12 (ix),h
   017A DD 7E F3      [19]  328 	ld	a,-13 (ix)
   017D C6 01         [ 7]  329 	add	a, #0x01
   017F DD 77 F5      [19]  330 	ld	-11 (ix),a
   0182 DD 7E F4      [19]  331 	ld	a,-12 (ix)
   0185 CE 00         [ 7]  332 	adc	a, #0x00
   0187 DD 77 F6      [19]  333 	ld	-10 (ix),a
   018A DD 6E F5      [19]  334 	ld	l,-11 (ix)
   018D DD 66 F6      [19]  335 	ld	h,-10 (ix)
   0190 36 64         [10]  336 	ld	(hl),#0x64
                            337 ;src/main.c:101: TEnemy  e = { 55,100,0 };
   0192 21 02 00      [10]  338 	ld	hl,#0x0002
   0195 39            [11]  339 	add	hl,sp
   0196 36 37         [10]  340 	ld	(hl),#0x37
   0198 21 02 00      [10]  341 	ld	hl,#0x0002
   019B 39            [11]  342 	add	hl,sp
   019C DD 75 FC      [19]  343 	ld	-4 (ix),l
   019F DD 74 FD      [19]  344 	ld	-3 (ix),h
   01A2 DD 7E FC      [19]  345 	ld	a,-4 (ix)
   01A5 C6 01         [ 7]  346 	add	a, #0x01
   01A7 DD 77 F1      [19]  347 	ld	-15 (ix),a
   01AA DD 7E FD      [19]  348 	ld	a,-3 (ix)
   01AD CE 00         [ 7]  349 	adc	a, #0x00
   01AF DD 77 F2      [19]  350 	ld	-14 (ix),a
   01B2 DD 6E F1      [19]  351 	ld	l,-15 (ix)
   01B5 DD 66 F2      [19]  352 	ld	h,-14 (ix)
   01B8 36 64         [10]  353 	ld	(hl),#0x64
   01BA DD 7E FC      [19]  354 	ld	a,-4 (ix)
   01BD C6 02         [ 7]  355 	add	a, #0x02
   01BF DD 77 F8      [19]  356 	ld	-8 (ix),a
   01C2 DD 7E FD      [19]  357 	ld	a,-3 (ix)
   01C5 CE 00         [ 7]  358 	adc	a, #0x00
   01C7 DD 77 F9      [19]  359 	ld	-7 (ix),a
   01CA DD 6E F8      [19]  360 	ld	l,-8 (ix)
   01CD DD 66 F9      [19]  361 	ld	h,-7 (ix)
   01D0 36 00         [10]  362 	ld	(hl),#0x00
                            363 ;src/main.c:104: u8* dir = 0;
   01D2 DD 36 EF 00   [19]  364 	ld	-17 (ix),#0x00
   01D6 DD 36 F0 00   [19]  365 	ld	-16 (ix),#0x00
                            366 ;src/main.c:105: u8* atk = 20;
   01DA DD 36 ED 14   [19]  367 	ld	-19 (ix),#0x14
   01DE DD 36 EE 00   [19]  368 	ld	-18 (ix),#0x00
                            369 ;src/main.c:106: u8* col = 0;
   01E2 DD 36 EB 00   [19]  370 	ld	-21 (ix),#0x00
   01E6 DD 36 EC 00   [19]  371 	ld	-20 (ix),#0x00
                            372 ;src/main.c:107: u8* rebote = 6;
   01EA 21 06 00      [10]  373 	ld	hl,#0x0006
   01ED E3            [19]  374 	ex	(sp), hl
                            375 ;src/main.c:109: cpct_clearScreen(0);
   01EE 21 00 40      [10]  376 	ld	hl,#0x4000
   01F1 E5            [11]  377 	push	hl
   01F2 AF            [ 4]  378 	xor	a, a
   01F3 F5            [11]  379 	push	af
   01F4 33            [ 6]  380 	inc	sp
   01F5 26 C0         [ 7]  381 	ld	h, #0xC0
   01F7 E5            [11]  382 	push	hl
   01F8 CDr00r00      [17]  383 	call	_cpct_memset
                            384 ;src/main.c:111: while (1){
   01FB                     385 00154$:
                            386 ;src/main.c:114: cpct_waitVSYNC();
   01FB CDr00r00      [17]  387 	call	_cpct_waitVSYNC
                            388 ;src/main.c:117: memptr = cpct_getScreenPtr(VMEM,p.x,p.y);
   01FE DD 6E F5      [19]  389 	ld	l,-11 (ix)
   0201 DD 66 F6      [19]  390 	ld	h,-10 (ix)
   0204 46            [ 7]  391 	ld	b,(hl)
   0205 DD 6E F3      [19]  392 	ld	l,-13 (ix)
   0208 DD 66 F4      [19]  393 	ld	h,-12 (ix)
   020B 4E            [ 7]  394 	ld	c, (hl)
   020C C5            [11]  395 	push	bc
   020D 21 00 C0      [10]  396 	ld	hl,#0xC000
   0210 E5            [11]  397 	push	hl
   0211 CDr00r00      [17]  398 	call	_cpct_getScreenPtr
                            399 ;src/main.c:119: cpct_drawSolidBox(memptr,0,4,16);
   0214 4D            [ 4]  400 	ld	c, l
   0215 44            [ 4]  401 	ld	b, h
                            402 ;src/main.c:118: if(atk <= 20)
   0216 3E 14         [ 7]  403 	ld	a,#0x14
   0218 DD BE ED      [19]  404 	cp	a, -19 (ix)
   021B 3E 00         [ 7]  405 	ld	a,#0x00
   021D DD 9E EE      [19]  406 	sbc	a, -18 (ix)
   0220 38 10         [12]  407 	jr	C,00102$
                            408 ;src/main.c:119: cpct_drawSolidBox(memptr,0,4,16);
   0222 21 04 10      [10]  409 	ld	hl,#0x1004
   0225 E5            [11]  410 	push	hl
   0226 AF            [ 4]  411 	xor	a, a
   0227 F5            [11]  412 	push	af
   0228 33            [ 6]  413 	inc	sp
   0229 C5            [11]  414 	push	bc
   022A CDr00r00      [17]  415 	call	_cpct_drawSolidBox
   022D F1            [10]  416 	pop	af
   022E F1            [10]  417 	pop	af
   022F 33            [ 6]  418 	inc	sp
   0230 18 0E         [12]  419 	jr	00103$
   0232                     420 00102$:
                            421 ;src/main.c:121: cpct_drawSolidBox(memptr,0,5,16);
   0232 21 05 10      [10]  422 	ld	hl,#0x1005
   0235 E5            [11]  423 	push	hl
   0236 AF            [ 4]  424 	xor	a, a
   0237 F5            [11]  425 	push	af
   0238 33            [ 6]  426 	inc	sp
   0239 C5            [11]  427 	push	bc
   023A CDr00r00      [17]  428 	call	_cpct_drawSolidBox
   023D F1            [10]  429 	pop	af
   023E F1            [10]  430 	pop	af
   023F 33            [ 6]  431 	inc	sp
   0240                     432 00103$:
                            433 ;src/main.c:123: memptr = cpct_getScreenPtr(VMEM,e.x,e.y);
   0240 DD 6E F1      [19]  434 	ld	l,-15 (ix)
   0243 DD 66 F2      [19]  435 	ld	h,-14 (ix)
   0246 46            [ 7]  436 	ld	b,(hl)
   0247 DD 6E FC      [19]  437 	ld	l,-4 (ix)
   024A DD 66 FD      [19]  438 	ld	h,-3 (ix)
   024D 4E            [ 7]  439 	ld	c, (hl)
   024E C5            [11]  440 	push	bc
   024F 21 00 C0      [10]  441 	ld	hl,#0xC000
   0252 E5            [11]  442 	push	hl
   0253 CDr00r00      [17]  443 	call	_cpct_getScreenPtr
   0256 EB            [ 4]  444 	ex	de,hl
                            445 ;src/main.c:124: if(e.vivo == 0)
   0257 DD 6E F8      [19]  446 	ld	l,-8 (ix)
   025A DD 66 F9      [19]  447 	ld	h,-7 (ix)
   025D 7E            [ 7]  448 	ld	a,(hl)
   025E B7            [ 4]  449 	or	a, a
   025F 20 0E         [12]  450 	jr	NZ,00105$
                            451 ;src/main.c:125: cpct_drawSolidBox(memptr,0,4,16);
   0261 21 04 10      [10]  452 	ld	hl,#0x1004
   0264 E5            [11]  453 	push	hl
   0265 AF            [ 4]  454 	xor	a, a
   0266 F5            [11]  455 	push	af
   0267 33            [ 6]  456 	inc	sp
   0268 D5            [11]  457 	push	de
   0269 CDr00r00      [17]  458 	call	_cpct_drawSolidBox
   026C F1            [10]  459 	pop	af
   026D F1            [10]  460 	pop	af
   026E 33            [ 6]  461 	inc	sp
   026F                     462 00105$:
                            463 ;src/main.c:129: if(col != 2){
   026F DD 7E EB      [19]  464 	ld	a,-21 (ix)
   0272 D6 02         [ 7]  465 	sub	a, #0x02
   0274 20 0A         [12]  466 	jr	NZ,00265$
   0276 DD 7E EC      [19]  467 	ld	a,-20 (ix)
   0279 B7            [ 4]  468 	or	a, a
   027A 20 04         [12]  469 	jr	NZ,00265$
   027C 3E 01         [ 7]  470 	ld	a,#0x01
   027E 18 01         [12]  471 	jr	00266$
   0280                     472 00265$:
   0280 AF            [ 4]  473 	xor	a,a
   0281                     474 00266$:
   0281 DD 77 FB      [19]  475 	ld	-5 (ix), a
   0284 B7            [ 4]  476 	or	a, a
   0285 C2r91r03      [10]  477 	jp	NZ,00138$
                            478 ;src/main.c:130: cpct_scanKeyboard_f();
   0288 CDr00r00      [17]  479 	call	_cpct_scanKeyboard_f
                            480 ;src/main.c:131: if(cpct_isKeyPressed(Key_Space) && atk >= 20){
   028B 21 05 80      [10]  481 	ld	hl,#0x8005
   028E CDr00r00      [17]  482 	call	_cpct_isKeyPressed
   0291 DD 75 FA      [19]  483 	ld	-6 (ix),l
   0294 DD 7E ED      [19]  484 	ld	a,-19 (ix)
   0297 D6 14         [ 7]  485 	sub	a, #0x14
   0299 DD 7E EE      [19]  486 	ld	a,-18 (ix)
   029C DE 00         [ 7]  487 	sbc	a, #0x00
   029E 3E 00         [ 7]  488 	ld	a,#0x00
   02A0 17            [ 4]  489 	rla
   02A1 DD 77 F7      [19]  490 	ld	-9 (ix),a
                            491 ;src/main.c:135: atk += 1;
   02A4 DD 7E ED      [19]  492 	ld	a,-19 (ix)
   02A7 C6 01         [ 7]  493 	add	a, #0x01
   02A9 DD 77 FE      [19]  494 	ld	-2 (ix),a
   02AC DD 7E EE      [19]  495 	ld	a,-18 (ix)
   02AF CE 00         [ 7]  496 	adc	a, #0x00
   02B1 DD 77 FF      [19]  497 	ld	-1 (ix),a
                            498 ;src/main.c:131: if(cpct_isKeyPressed(Key_Space) && atk >= 20){
   02B4 DD 7E FA      [19]  499 	ld	a,-6 (ix)
   02B7 B7            [ 4]  500 	or	a, a
   02B8 28 53         [12]  501 	jr	Z,00132$
   02BA DD 7E F7      [19]  502 	ld	a,-9 (ix)
   02BD B7            [ 4]  503 	or	a, a
   02BE 20 4D         [12]  504 	jr	NZ,00132$
                            505 ;src/main.c:132: if(atk >= 50)
   02C0 DD 7E ED      [19]  506 	ld	a,-19 (ix)
   02C3 D6 32         [ 7]  507 	sub	a, #0x32
   02C5 DD 7E EE      [19]  508 	ld	a,-18 (ix)
   02C8 DE 00         [ 7]  509 	sbc	a, #0x00
   02CA 38 0A         [12]  510 	jr	C,00107$
                            511 ;src/main.c:133: atk = 0;
   02CC DD 36 ED 00   [19]  512 	ld	-19 (ix),#0x00
   02D0 DD 36 EE 00   [19]  513 	ld	-18 (ix),#0x00
   02D4 18 0C         [12]  514 	jr	00108$
   02D6                     515 00107$:
                            516 ;src/main.c:135: atk += 1;
   02D6 DD 7E FE      [19]  517 	ld	a,-2 (ix)
   02D9 DD 77 ED      [19]  518 	ld	-19 (ix),a
   02DC DD 7E FF      [19]  519 	ld	a,-1 (ix)
   02DF DD 77 EE      [19]  520 	ld	-18 (ix),a
   02E2                     521 00108$:
                            522 ;src/main.c:136: if(cpct_isKeyPressed(Key_CursorRight))
   02E2 21 00 02      [10]  523 	ld	hl,#0x0200
   02E5 CDr00r00      [17]  524 	call	_cpct_isKeyPressed
   02E8 7D            [ 4]  525 	ld	a,l
   02E9 B7            [ 4]  526 	or	a, a
   02EA 28 0B         [12]  527 	jr	Z,00112$
                            528 ;src/main.c:137: dir = 0;
   02EC DD 36 EF 00   [19]  529 	ld	-17 (ix),#0x00
   02F0 DD 36 F0 00   [19]  530 	ld	-16 (ix),#0x00
   02F4 C3rBCr03      [10]  531 	jp	00139$
   02F7                     532 00112$:
                            533 ;src/main.c:138: else if(cpct_isKeyPressed(Key_CursorLeft))
   02F7 21 01 01      [10]  534 	ld	hl,#0x0101
   02FA CDr00r00      [17]  535 	call	_cpct_isKeyPressed
   02FD 7D            [ 4]  536 	ld	a,l
   02FE B7            [ 4]  537 	or	a, a
   02FF CArBCr03      [10]  538 	jp	Z,00139$
                            539 ;src/main.c:139: dir = 1;
   0302 DD 36 EF 01   [19]  540 	ld	-17 (ix),#0x01
   0306 DD 36 F0 00   [19]  541 	ld	-16 (ix),#0x00
   030A C3rBCr03      [10]  542 	jp	00139$
   030D                     543 00132$:
                            544 ;src/main.c:141: if(atk < 20)
   030D DD 7E F7      [19]  545 	ld	a,-9 (ix)
   0310 B7            [ 4]  546 	or	a, a
   0311 28 0E         [12]  547 	jr	Z,00115$
                            548 ;src/main.c:142: atk += 1;
   0313 DD 7E FE      [19]  549 	ld	a,-2 (ix)
   0316 DD 77 ED      [19]  550 	ld	-19 (ix),a
   0319 DD 7E FF      [19]  551 	ld	a,-1 (ix)
   031C DD 77 EE      [19]  552 	ld	-18 (ix),a
   031F 18 08         [12]  553 	jr	00116$
   0321                     554 00115$:
                            555 ;src/main.c:144: atk = 20;
   0321 DD 36 ED 14   [19]  556 	ld	-19 (ix),#0x14
   0325 DD 36 EE 00   [19]  557 	ld	-18 (ix),#0x00
   0329                     558 00116$:
                            559 ;src/main.c:145: if(cpct_isKeyPressed(Key_CursorRight) && p.x < 76 ){
   0329 21 00 02      [10]  560 	ld	hl,#0x0200
   032C CDr00r00      [17]  561 	call	_cpct_isKeyPressed
   032F 7D            [ 4]  562 	ld	a,l
   0330 B7            [ 4]  563 	or	a, a
   0331 28 24         [12]  564 	jr	Z,00128$
   0333 DD 6E F3      [19]  565 	ld	l,-13 (ix)
   0336 DD 66 F4      [19]  566 	ld	h,-12 (ix)
   0339 56            [ 7]  567 	ld	d,(hl)
   033A 7A            [ 4]  568 	ld	a,d
   033B D6 4C         [ 7]  569 	sub	a, #0x4C
   033D 30 18         [12]  570 	jr	NC,00128$
                            571 ;src/main.c:146: if(col != 2)
   033F DD 7E FB      [19]  572 	ld	a,-5 (ix)
   0342 B7            [ 4]  573 	or	a, a
   0343 20 08         [12]  574 	jr	NZ,00118$
                            575 ;src/main.c:147: p.x += 1;
   0345 14            [ 4]  576 	inc	d
   0346 DD 6E F3      [19]  577 	ld	l,-13 (ix)
   0349 DD 66 F4      [19]  578 	ld	h,-12 (ix)
   034C 72            [ 7]  579 	ld	(hl),d
   034D                     580 00118$:
                            581 ;src/main.c:148: dir = 0;
   034D DD 36 EF 00   [19]  582 	ld	-17 (ix),#0x00
   0351 DD 36 F0 00   [19]  583 	ld	-16 (ix),#0x00
   0355 18 65         [12]  584 	jr	00139$
   0357                     585 00128$:
                            586 ;src/main.c:149: }else if(cpct_isKeyPressed(Key_CursorLeft) && p.x > 0 ){
   0357 21 01 01      [10]  587 	ld	hl,#0x0101
   035A CDr00r00      [17]  588 	call	_cpct_isKeyPressed
   035D 7D            [ 4]  589 	ld	a,l
   035E B7            [ 4]  590 	or	a, a
   035F 28 23         [12]  591 	jr	Z,00124$
   0361 DD 6E F3      [19]  592 	ld	l,-13 (ix)
   0364 DD 66 F4      [19]  593 	ld	h,-12 (ix)
   0367 56            [ 7]  594 	ld	d,(hl)
   0368 7A            [ 4]  595 	ld	a,d
   0369 B7            [ 4]  596 	or	a, a
   036A 28 18         [12]  597 	jr	Z,00124$
                            598 ;src/main.c:150: if(col != 2)
   036C DD 7E FB      [19]  599 	ld	a,-5 (ix)
   036F B7            [ 4]  600 	or	a, a
   0370 20 08         [12]  601 	jr	NZ,00120$
                            602 ;src/main.c:151: p.x -= 1;
   0372 15            [ 4]  603 	dec	d
   0373 DD 6E F3      [19]  604 	ld	l,-13 (ix)
   0376 DD 66 F4      [19]  605 	ld	h,-12 (ix)
   0379 72            [ 7]  606 	ld	(hl),d
   037A                     607 00120$:
                            608 ;src/main.c:152: dir = 1;
   037A DD 36 EF 01   [19]  609 	ld	-17 (ix),#0x01
   037E DD 36 F0 00   [19]  610 	ld	-16 (ix),#0x00
   0382 18 38         [12]  611 	jr	00139$
   0384                     612 00124$:
                            613 ;src/main.c:153: }else  if(cpct_isKeyPressed(Key_Esc)){
   0384 21 08 04      [10]  614 	ld	hl,#0x0408
   0387 CDr00r00      [17]  615 	call	_cpct_isKeyPressed
   038A 7D            [ 4]  616 	ld	a,l
   038B B7            [ 4]  617 	or	a, a
   038C 28 2E         [12]  618 	jr	Z,00139$
                            619 ;src/main.c:154: return;
   038E C3r54r05      [10]  620 	jp	00159$
   0391                     621 00138$:
                            622 ;src/main.c:158: p.x -= 2;
   0391 DD 6E F3      [19]  623 	ld	l,-13 (ix)
   0394 DD 66 F4      [19]  624 	ld	h,-12 (ix)
   0397 7E            [ 7]  625 	ld	a,(hl)
   0398 C6 FE         [ 7]  626 	add	a,#0xFE
   039A DD 6E F3      [19]  627 	ld	l,-13 (ix)
   039D DD 66 F4      [19]  628 	ld	h,-12 (ix)
   03A0 77            [ 7]  629 	ld	(hl),a
                            630 ;src/main.c:159: rebote -= 2;
   03A1 DD 5E E4      [19]  631 	ld	e,-28 (ix)
   03A4 DD 56 E5      [19]  632 	ld	d,-27 (ix)
   03A7 1B            [ 6]  633 	dec	de
   03A8 1B            [ 6]  634 	dec	de
   03A9 33            [ 6]  635 	inc	sp
   03AA 33            [ 6]  636 	inc	sp
   03AB D5            [11]  637 	push	de
                            638 ;src/main.c:160: if(rebote == 0){
   03AC 7A            [ 4]  639 	ld	a,d
   03AD B3            [ 4]  640 	or	a,e
   03AE 20 0C         [12]  641 	jr	NZ,00139$
                            642 ;src/main.c:161: rebote = 6;
   03B0 21 06 00      [10]  643 	ld	hl,#0x0006
   03B3 E3            [19]  644 	ex	(sp), hl
                            645 ;src/main.c:162: col = 0;
   03B4 DD 36 EB 00   [19]  646 	ld	-21 (ix),#0x00
   03B8 DD 36 EC 00   [19]  647 	ld	-20 (ix),#0x00
   03BC                     648 00139$:
                            649 ;src/main.c:167: sprite = checkSprite(atk,dir);
   03BC DD 6E EF      [19]  650 	ld	l,-17 (ix)
   03BF DD 66 F0      [19]  651 	ld	h,-16 (ix)
   03C2 E5            [11]  652 	push	hl
   03C3 DD 6E ED      [19]  653 	ld	l,-19 (ix)
   03C6 DD 66 EE      [19]  654 	ld	h,-18 (ix)
   03C9 E5            [11]  655 	push	hl
   03CA CDr29r01      [17]  656 	call	_checkSprite
   03CD F1            [10]  657 	pop	af
   03CE F1            [10]  658 	pop	af
   03CF 4D            [ 4]  659 	ld	c, l
   03D0 44            [ 4]  660 	ld	b, h
                            661 ;src/main.c:169: if(col != 2 && e.vivo == 0)
   03D1 DD 7E EB      [19]  662 	ld	a,-21 (ix)
   03D4 D6 02         [ 7]  663 	sub	a, #0x02
   03D6 20 06         [12]  664 	jr	NZ,00267$
   03D8 DD 7E EC      [19]  665 	ld	a,-20 (ix)
   03DB B7            [ 4]  666 	or	a, a
   03DC 28 58         [12]  667 	jr	Z,00141$
   03DE                     668 00267$:
   03DE DD 6E F8      [19]  669 	ld	l,-8 (ix)
   03E1 DD 66 F9      [19]  670 	ld	h,-7 (ix)
   03E4 7E            [ 7]  671 	ld	a,(hl)
   03E5 B7            [ 4]  672 	or	a, a
   03E6 20 4E         [12]  673 	jr	NZ,00141$
                            674 ;src/main.c:170: col = checkCollisions(p.x,p.y,e.x,e.y,dir,atk);
   03E8 DD 6E F1      [19]  675 	ld	l,-15 (ix)
   03EB DD 66 F2      [19]  676 	ld	h,-14 (ix)
   03EE 5E            [ 7]  677 	ld	e,(hl)
   03EF DD 6E FC      [19]  678 	ld	l,-4 (ix)
   03F2 DD 66 FD      [19]  679 	ld	h,-3 (ix)
   03F5 7E            [ 7]  680 	ld	a,(hl)
   03F6 DD 77 FE      [19]  681 	ld	-2 (ix),a
   03F9 DD 6E F5      [19]  682 	ld	l,-11 (ix)
   03FC DD 66 F6      [19]  683 	ld	h,-10 (ix)
   03FF 7E            [ 7]  684 	ld	a,(hl)
   0400 DD 77 F7      [19]  685 	ld	-9 (ix),a
   0403 DD 6E F3      [19]  686 	ld	l,-13 (ix)
   0406 DD 66 F4      [19]  687 	ld	h,-12 (ix)
   0409 56            [ 7]  688 	ld	d,(hl)
   040A C5            [11]  689 	push	bc
   040B DD 6E ED      [19]  690 	ld	l,-19 (ix)
   040E DD 66 EE      [19]  691 	ld	h,-18 (ix)
   0411 E5            [11]  692 	push	hl
   0412 DD 6E EF      [19]  693 	ld	l,-17 (ix)
   0415 DD 66 F0      [19]  694 	ld	h,-16 (ix)
   0418 E5            [11]  695 	push	hl
   0419 7B            [ 4]  696 	ld	a,e
   041A F5            [11]  697 	push	af
   041B 33            [ 6]  698 	inc	sp
   041C DD 7E FE      [19]  699 	ld	a,-2 (ix)
   041F F5            [11]  700 	push	af
   0420 33            [ 6]  701 	inc	sp
   0421 DD 7E F7      [19]  702 	ld	a,-9 (ix)
   0424 F5            [11]  703 	push	af
   0425 33            [ 6]  704 	inc	sp
   0426 D5            [11]  705 	push	de
   0427 33            [ 6]  706 	inc	sp
   0428 CDr95r00      [17]  707 	call	_checkCollisions
   042B F1            [10]  708 	pop	af
   042C F1            [10]  709 	pop	af
   042D F1            [10]  710 	pop	af
   042E F1            [10]  711 	pop	af
   042F C1            [10]  712 	pop	bc
   0430 DD 75 EB      [19]  713 	ld	-21 (ix),l
   0433 DD 74 EC      [19]  714 	ld	-20 (ix),h
   0436                     715 00141$:
                            716 ;src/main.c:171: if(col == 1)
   0436 DD 7E EB      [19]  717 	ld	a,-21 (ix)
   0439 3D            [ 4]  718 	dec	a
   043A 20 0E         [12]  719 	jr	NZ,00144$
   043C DD 7E EC      [19]  720 	ld	a,-20 (ix)
   043F B7            [ 4]  721 	or	a, a
   0440 20 08         [12]  722 	jr	NZ,00144$
                            723 ;src/main.c:172: e.vivo = 1;
   0442 DD 6E F8      [19]  724 	ld	l,-8 (ix)
   0445 DD 66 F9      [19]  725 	ld	h,-7 (ix)
   0448 36 01         [10]  726 	ld	(hl),#0x01
   044A                     727 00144$:
                            728 ;src/main.c:175: memptr = cpct_getScreenPtr(VMEM,p.x,p.y);
   044A DD 6E F5      [19]  729 	ld	l,-11 (ix)
   044D DD 66 F6      [19]  730 	ld	h,-10 (ix)
   0450 56            [ 7]  731 	ld	d,(hl)
   0451 DD 6E F3      [19]  732 	ld	l,-13 (ix)
   0454 DD 66 F4      [19]  733 	ld	h,-12 (ix)
   0457 7E            [ 7]  734 	ld	a,(hl)
   0458 C5            [11]  735 	push	bc
   0459 D5            [11]  736 	push	de
   045A 33            [ 6]  737 	inc	sp
   045B F5            [11]  738 	push	af
   045C 33            [ 6]  739 	inc	sp
   045D 21 00 C0      [10]  740 	ld	hl,#0xC000
   0460 E5            [11]  741 	push	hl
   0461 CDr00r00      [17]  742 	call	_cpct_getScreenPtr
   0464 C1            [10]  743 	pop	bc
                            744 ;src/main.c:178: if(atk >= 21)
   0465 DD 7E ED      [19]  745 	ld	a,-19 (ix)
   0468 D6 15         [ 7]  746 	sub	a, #0x15
   046A DD 7E EE      [19]  747 	ld	a,-18 (ix)
   046D DE 00         [ 7]  748 	sbc	a, #0x00
   046F 3E 00         [ 7]  749 	ld	a,#0x00
   0471 17            [ 4]  750 	rla
   0472 5F            [ 4]  751 	ld	e,a
                            752 ;src/main.c:119: cpct_drawSolidBox(memptr,0,4,16);
   0473 DD 75 FE      [19]  753 	ld	-2 (ix),l
   0476 DD 74 FF      [19]  754 	ld	-1 (ix),h
                            755 ;src/main.c:179: cpct_drawSpriteMasked(sprite, memptr, 5, 16);
                            756 ;src/main.c:178: if(atk >= 21)
   0479 7B            [ 4]  757 	ld	a,e
   047A B7            [ 4]  758 	or	a, a
   047B 20 13         [12]  759 	jr	NZ,00146$
                            760 ;src/main.c:179: cpct_drawSpriteMasked(sprite, memptr, 5, 16);
   047D D5            [11]  761 	push	de
   047E 21 05 10      [10]  762 	ld	hl,#0x1005
   0481 E5            [11]  763 	push	hl
   0482 DD 6E FE      [19]  764 	ld	l,-2 (ix)
   0485 DD 66 FF      [19]  765 	ld	h,-1 (ix)
   0488 E5            [11]  766 	push	hl
   0489 C5            [11]  767 	push	bc
   048A CDr00r00      [17]  768 	call	_cpct_drawSpriteMasked
   048D D1            [10]  769 	pop	de
   048E 18 11         [12]  770 	jr	00147$
   0490                     771 00146$:
                            772 ;src/main.c:181: cpct_drawSpriteMasked(sprite, memptr, 4, 16);
   0490 D5            [11]  773 	push	de
   0491 21 04 10      [10]  774 	ld	hl,#0x1004
   0494 E5            [11]  775 	push	hl
   0495 DD 6E FE      [19]  776 	ld	l,-2 (ix)
   0498 DD 66 FF      [19]  777 	ld	h,-1 (ix)
   049B E5            [11]  778 	push	hl
   049C C5            [11]  779 	push	bc
   049D CDr00r00      [17]  780 	call	_cpct_drawSpriteMasked
   04A0 D1            [10]  781 	pop	de
   04A1                     782 00147$:
                            783 ;src/main.c:184: if(e.vivo == 0){
   04A1 DD 6E F8      [19]  784 	ld	l,-8 (ix)
   04A4 DD 66 F9      [19]  785 	ld	h,-7 (ix)
   04A7 7E            [ 7]  786 	ld	a, (hl)
   04A8 B7            [ 4]  787 	or	a, a
   04A9 20 2C         [12]  788 	jr	NZ,00149$
                            789 ;src/main.c:185: memptr = cpct_getScreenPtr(VMEM,e.x,e.y);
   04AB DD 6E F1      [19]  790 	ld	l,-15 (ix)
   04AE DD 66 F2      [19]  791 	ld	h,-14 (ix)
   04B1 46            [ 7]  792 	ld	b,(hl)
   04B2 DD 6E FC      [19]  793 	ld	l,-4 (ix)
   04B5 DD 66 FD      [19]  794 	ld	h,-3 (ix)
   04B8 56            [ 7]  795 	ld	d,(hl)
   04B9 D5            [11]  796 	push	de
   04BA 4A            [ 4]  797 	ld	c, d
   04BB C5            [11]  798 	push	bc
   04BC 21 00 C0      [10]  799 	ld	hl,#0xC000
   04BF E5            [11]  800 	push	hl
   04C0 CDr00r00      [17]  801 	call	_cpct_getScreenPtr
   04C3 D1            [10]  802 	pop	de
                            803 ;src/main.c:186: cpct_drawSolidBox(memptr, 18, 4, 16);
   04C4 4D            [ 4]  804 	ld	c, l
   04C5 44            [ 4]  805 	ld	b, h
   04C6 D5            [11]  806 	push	de
   04C7 21 04 10      [10]  807 	ld	hl,#0x1004
   04CA E5            [11]  808 	push	hl
   04CB 3E 12         [ 7]  809 	ld	a,#0x12
   04CD F5            [11]  810 	push	af
   04CE 33            [ 6]  811 	inc	sp
   04CF C5            [11]  812 	push	bc
   04D0 CDr00r00      [17]  813 	call	_cpct_drawSolidBox
   04D3 F1            [10]  814 	pop	af
   04D4 F1            [10]  815 	pop	af
   04D5 33            [ 6]  816 	inc	sp
   04D6 D1            [10]  817 	pop	de
   04D7                     818 00149$:
                            819 ;src/main.c:189: memptr = cpct_getScreenPtr(VMEM, 6, 10);
   04D7 D5            [11]  820 	push	de
   04D8 21 06 0A      [10]  821 	ld	hl,#0x0A06
   04DB E5            [11]  822 	push	hl
   04DC 21 00 C0      [10]  823 	ld	hl,#0xC000
   04DF E5            [11]  824 	push	hl
   04E0 CDr00r00      [17]  825 	call	_cpct_getScreenPtr
   04E3 D1            [10]  826 	pop	de
                            827 ;src/main.c:190: cpct_drawStringM0("FATIGA",memptr, 2, 0);
   04E4 4D            [ 4]  828 	ld	c, l
   04E5 44            [ 4]  829 	ld	b, h
   04E6 D5            [11]  830 	push	de
   04E7 21 02 00      [10]  831 	ld	hl,#0x0002
   04EA E5            [11]  832 	push	hl
   04EB C5            [11]  833 	push	bc
   04EC 21r59r05      [10]  834 	ld	hl,#___str_2
   04EF E5            [11]  835 	push	hl
   04F0 CDr00r00      [17]  836 	call	_cpct_drawStringM0
   04F3 21 06 00      [10]  837 	ld	hl,#6
   04F6 39            [11]  838 	add	hl,sp
   04F7 F9            [ 6]  839 	ld	sp,hl
   04F8 D1            [10]  840 	pop	de
                            841 ;src/main.c:192: if(atk >= 21)
   04F9 7B            [ 4]  842 	ld	a,e
                            843 ;src/main.c:193: for(i=0; i<(*atk - 20)/10; i++){
   04FA B7            [ 4]  844 	or	a,a
   04FB C2rFBr01      [10]  845 	jp	NZ,00154$
   04FE 4F            [ 4]  846 	ld	c,a
   04FF                     847 00157$:
   04FF DD 6E ED      [19]  848 	ld	l,-19 (ix)
   0502 DD 66 EE      [19]  849 	ld	h,-18 (ix)
   0505 7E            [ 7]  850 	ld	a, (hl)
   0506 1E 00         [ 7]  851 	ld	e, #0x00
   0508 C6 EC         [ 7]  852 	add	a,#0xEC
   050A 6F            [ 4]  853 	ld	l,a
   050B 7B            [ 4]  854 	ld	a,e
   050C CE FF         [ 7]  855 	adc	a,#0xFF
   050E 67            [ 4]  856 	ld	h,a
   050F C5            [11]  857 	push	bc
   0510 11 0A 00      [10]  858 	ld	de,#0x000A
   0513 D5            [11]  859 	push	de
   0514 E5            [11]  860 	push	hl
   0515 CDr00r00      [17]  861 	call	__divsint
   0518 F1            [10]  862 	pop	af
   0519 F1            [10]  863 	pop	af
   051A C1            [10]  864 	pop	bc
   051B 51            [ 4]  865 	ld	d,c
   051C 1E 00         [ 7]  866 	ld	e,#0x00
   051E 7A            [ 4]  867 	ld	a,d
   051F 95            [ 4]  868 	sub	a, l
   0520 7B            [ 4]  869 	ld	a,e
   0521 9C            [ 4]  870 	sbc	a, h
   0522 E2r27r05      [10]  871 	jp	PO, 00270$
   0525 EE 80         [ 7]  872 	xor	a, #0x80
   0527                     873 00270$:
   0527 F2rFBr01      [10]  874 	jp	P,00154$
                            875 ;src/main.c:194: memptr = cpct_getScreenPtr(VMEM, 18+i*4, 10);
   052A 79            [ 4]  876 	ld	a,c
   052B 87            [ 4]  877 	add	a, a
   052C 87            [ 4]  878 	add	a, a
   052D C6 12         [ 7]  879 	add	a, #0x12
   052F 57            [ 4]  880 	ld	d,a
   0530 C5            [11]  881 	push	bc
   0531 3E 0A         [ 7]  882 	ld	a,#0x0A
   0533 F5            [11]  883 	push	af
   0534 33            [ 6]  884 	inc	sp
   0535 D5            [11]  885 	push	de
   0536 33            [ 6]  886 	inc	sp
   0537 21 00 C0      [10]  887 	ld	hl,#0xC000
   053A E5            [11]  888 	push	hl
   053B CDr00r00      [17]  889 	call	_cpct_getScreenPtr
   053E C1            [10]  890 	pop	bc
                            891 ;src/main.c:195: cpct_drawSolidBox(memptr, 18, 3, 10);
   053F EB            [ 4]  892 	ex	de,hl
   0540 C5            [11]  893 	push	bc
   0541 21 03 0A      [10]  894 	ld	hl,#0x0A03
   0544 E5            [11]  895 	push	hl
   0545 3E 12         [ 7]  896 	ld	a,#0x12
   0547 F5            [11]  897 	push	af
   0548 33            [ 6]  898 	inc	sp
   0549 D5            [11]  899 	push	de
   054A CDr00r00      [17]  900 	call	_cpct_drawSolidBox
   054D F1            [10]  901 	pop	af
   054E F1            [10]  902 	pop	af
   054F 33            [ 6]  903 	inc	sp
   0550 C1            [10]  904 	pop	bc
                            905 ;src/main.c:193: for(i=0; i<(*atk - 20)/10; i++){
   0551 0C            [ 4]  906 	inc	c
   0552 18 AB         [12]  907 	jr	00157$
   0554                     908 00159$:
   0554 DD F9         [10]  909 	ld	sp, ix
   0556 DD E1         [14]  910 	pop	ix
   0558 C9            [10]  911 	ret
   0559                     912 ___str_2:
   0559 46 41 54 49 47 41   913 	.ascii "FATIGA"
   055F 00                  914 	.db 0x00
                            915 ;src/main.c:202: void main(void) {
                            916 ;	---------------------------------
                            917 ; Function main
                            918 ; ---------------------------------
   0560                     919 _main::
                            920 ;src/main.c:204: init();
   0560 CDr00r00      [17]  921 	call	_init
                            922 ;src/main.c:207: while(1){
   0563                     923 00102$:
                            924 ;src/main.c:208: menu();
   0563 CDr29r00      [17]  925 	call	_menu
                            926 ;src/main.c:209: game();
   0566 CDr5Dr01      [17]  927 	call	_game
   0569 18 F8         [12]  928 	jr	00102$
                            929 	.area _CODE
                            930 	.area _INITIALIZER
                            931 	.area _CABS (ABS)
