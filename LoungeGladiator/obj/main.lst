                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.0 #9253 (Sep 26 2015) (CYGWIN)
                              4 ; This file was generated Fri Oct  2 10:07:54 2015
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _game
                             14 	.globl _drawMap
                             15 	.globl _checkSprite
                             16 	.globl _checkCollisions
                             17 	.globl _menu
                             18 	.globl _init
                             19 	.globl _cpct_getScreenPtr
                             20 	.globl _cpct_setPalette
                             21 	.globl _cpct_fw2hw
                             22 	.globl _cpct_waitVSYNC
                             23 	.globl _cpct_setVideoMode
                             24 	.globl _cpct_drawStringM0
                             25 	.globl _cpct_drawSolidBox
                             26 	.globl _cpct_drawSpriteMasked
                             27 	.globl _cpct_isKeyPressed
                             28 	.globl _cpct_scanKeyboard_f
                             29 	.globl _cpct_memset
                             30 	.globl _cpct_disableFirmware
                             31 	.globl _g_palette
                             32 	.globl _mapa
                             33 ;--------------------------------------------------------
                             34 ; special function registers
                             35 ;--------------------------------------------------------
                             36 ;--------------------------------------------------------
                             37 ; ram data
                             38 ;--------------------------------------------------------
                             39 	.area _DATA
                             40 ;--------------------------------------------------------
                             41 ; ram data
                             42 ;--------------------------------------------------------
                             43 	.area _INITIALIZED
                             44 ;--------------------------------------------------------
                             45 ; absolute external ram data
                             46 ;--------------------------------------------------------
                             47 	.area _DABS (ABS)
                             48 ;--------------------------------------------------------
                             49 ; global & static initialisations
                             50 ;--------------------------------------------------------
                             51 	.area _HOME
                             52 	.area _GSINIT
                             53 	.area _GSFINAL
                             54 	.area _GSINIT
                             55 ;--------------------------------------------------------
                             56 ; Home
                             57 ;--------------------------------------------------------
                             58 	.area _HOME
                             59 	.area _HOME
                             60 ;--------------------------------------------------------
                             61 ; code
                             62 ;--------------------------------------------------------
                             63 	.area _CODE
                             64 ;src/main.c:58: void init(){
                             65 ;	---------------------------------
                             66 ; Function init
                             67 ; ---------------------------------
   0000                      68 _init::
                             69 ;src/main.c:59: cpct_disableFirmware();
   0000 CDr00r00      [17]   70 	call	_cpct_disableFirmware
                             71 ;src/main.c:60: cpct_setVideoMode(0);
   0003 AF            [ 4]   72 	xor	a, a
   0004 F5            [11]   73 	push	af
   0005 33            [ 6]   74 	inc	sp
   0006 CDr00r00      [17]   75 	call	_cpct_setVideoMode
   0009 33            [ 6]   76 	inc	sp
                             77 ;src/main.c:61: cpct_fw2hw(g_palette,4);
   000A 11rC5r00      [10]   78 	ld	de,#_g_palette
   000D 3E 04         [ 7]   79 	ld	a,#0x04
   000F F5            [11]   80 	push	af
   0010 33            [ 6]   81 	inc	sp
   0011 D5            [11]   82 	push	de
   0012 CDr00r00      [17]   83 	call	_cpct_fw2hw
   0015 F1            [10]   84 	pop	af
   0016 33            [ 6]   85 	inc	sp
                             86 ;src/main.c:62: cpct_setPalette(g_palette,4);
   0017 11rC5r00      [10]   87 	ld	de,#_g_palette
   001A 3E 04         [ 7]   88 	ld	a,#0x04
   001C F5            [11]   89 	push	af
   001D 33            [ 6]   90 	inc	sp
   001E D5            [11]   91 	push	de
   001F CDr00r00      [17]   92 	call	_cpct_setPalette
   0022 F1            [10]   93 	pop	af
   0023 33            [ 6]   94 	inc	sp
   0024 C9            [10]   95 	ret
   0025                      96 _mapa:
   0025 01                   97 	.db #0x01	; 1
   0026 01                   98 	.db #0x01	; 1
   0027 01                   99 	.db #0x01	; 1
   0028 01                  100 	.db #0x01	; 1
   0029 00                  101 	.db #0x00	; 0
   002A 01                  102 	.db #0x01	; 1
   002B 01                  103 	.db #0x01	; 1
   002C 01                  104 	.db #0x01	; 1
   002D 00                  105 	.db #0x00	; 0
   002E 01                  106 	.db #0x01	; 1
   002F 01                  107 	.db #0x01	; 1
   0030 00                  108 	.db #0x00	; 0
   0031 01                  109 	.db #0x01	; 1
   0032 01                  110 	.db #0x01	; 1
   0033 01                  111 	.db #0x01	; 1
   0034 01                  112 	.db #0x01	; 1
   0035 01                  113 	.db #0x01	; 1
   0036 01                  114 	.db #0x01	; 1
   0037 01                  115 	.db #0x01	; 1
   0038 01                  116 	.db #0x01	; 1
   0039 00                  117 	.db #0x00	; 0
   003A 01                  118 	.db #0x01	; 1
   003B 01                  119 	.db #0x01	; 1
   003C 01                  120 	.db #0x01	; 1
   003D 00                  121 	.db #0x00	; 0
   003E 01                  122 	.db #0x01	; 1
   003F 01                  123 	.db #0x01	; 1
   0040 00                  124 	.db #0x00	; 0
   0041 00                  125 	.db #0x00	; 0
   0042 00                  126 	.db #0x00	; 0
   0043 01                  127 	.db #0x01	; 1
   0044 01                  128 	.db #0x01	; 1
   0045 01                  129 	.db #0x01	; 1
   0046 01                  130 	.db #0x01	; 1
   0047 01                  131 	.db #0x01	; 1
   0048 01                  132 	.db #0x01	; 1
   0049 00                  133 	.db #0x00	; 0
   004A 01                  134 	.db #0x01	; 1
   004B 01                  135 	.db #0x01	; 1
   004C 01                  136 	.db #0x01	; 1
   004D 00                  137 	.db #0x00	; 0
   004E 01                  138 	.db #0x01	; 1
   004F 01                  139 	.db #0x01	; 1
   0050 00                  140 	.db #0x00	; 0
   0051 01                  141 	.db #0x01	; 1
   0052 00                  142 	.db #0x00	; 0
   0053 01                  143 	.db #0x01	; 1
   0054 01                  144 	.db #0x01	; 1
   0055 01                  145 	.db #0x01	; 1
   0056 01                  146 	.db #0x01	; 1
   0057 01                  147 	.db #0x01	; 1
   0058 01                  148 	.db #0x01	; 1
   0059 00                  149 	.db #0x00	; 0
   005A 01                  150 	.db #0x01	; 1
   005B 01                  151 	.db #0x01	; 1
   005C 01                  152 	.db #0x01	; 1
   005D 00                  153 	.db #0x00	; 0
   005E 01                  154 	.db #0x01	; 1
   005F 01                  155 	.db #0x01	; 1
   0060 00                  156 	.db #0x00	; 0
   0061 01                  157 	.db #0x01	; 1
   0062 00                  158 	.db #0x00	; 0
   0063 01                  159 	.db #0x01	; 1
   0064 01                  160 	.db #0x01	; 1
   0065 01                  161 	.db #0x01	; 1
   0066 01                  162 	.db #0x01	; 1
   0067 01                  163 	.db #0x01	; 1
   0068 01                  164 	.db #0x01	; 1
   0069 00                  165 	.db #0x00	; 0
   006A 00                  166 	.db #0x00	; 0
   006B 00                  167 	.db #0x00	; 0
   006C 00                  168 	.db #0x00	; 0
   006D 00                  169 	.db #0x00	; 0
   006E 00                  170 	.db #0x00	; 0
   006F 00                  171 	.db #0x00	; 0
   0070 00                  172 	.db #0x00	; 0
   0071 01                  173 	.db #0x01	; 1
   0072 00                  174 	.db #0x00	; 0
   0073 01                  175 	.db #0x01	; 1
   0074 01                  176 	.db #0x01	; 1
   0075 01                  177 	.db #0x01	; 1
   0076 01                  178 	.db #0x01	; 1
   0077 01                  179 	.db #0x01	; 1
   0078 01                  180 	.db #0x01	; 1
   0079 00                  181 	.db #0x00	; 0
   007A 01                  182 	.db #0x01	; 1
   007B 01                  183 	.db #0x01	; 1
   007C 01                  184 	.db #0x01	; 1
   007D 00                  185 	.db #0x00	; 0
   007E 01                  186 	.db #0x01	; 1
   007F 01                  187 	.db #0x01	; 1
   0080 01                  188 	.db #0x01	; 1
   0081 01                  189 	.db #0x01	; 1
   0082 00                  190 	.db #0x00	; 0
   0083 01                  191 	.db #0x01	; 1
   0084 01                  192 	.db #0x01	; 1
   0085 01                  193 	.db #0x01	; 1
   0086 01                  194 	.db #0x01	; 1
   0087 01                  195 	.db #0x01	; 1
   0088 01                  196 	.db #0x01	; 1
   0089 00                  197 	.db #0x00	; 0
   008A 01                  198 	.db #0x01	; 1
   008B 01                  199 	.db #0x01	; 1
   008C 01                  200 	.db #0x01	; 1
   008D 00                  201 	.db #0x00	; 0
   008E 01                  202 	.db #0x01	; 1
   008F 01                  203 	.db #0x01	; 1
   0090 01                  204 	.db #0x01	; 1
   0091 01                  205 	.db #0x01	; 1
   0092 00                  206 	.db #0x00	; 0
   0093 01                  207 	.db #0x01	; 1
   0094 01                  208 	.db #0x01	; 1
   0095 01                  209 	.db #0x01	; 1
   0096 01                  210 	.db #0x01	; 1
   0097 01                  211 	.db #0x01	; 1
   0098 01                  212 	.db #0x01	; 1
   0099 00                  213 	.db #0x00	; 0
   009A 01                  214 	.db #0x01	; 1
   009B 01                  215 	.db #0x01	; 1
   009C 01                  216 	.db #0x01	; 1
   009D 00                  217 	.db #0x00	; 0
   009E 01                  218 	.db #0x01	; 1
   009F 01                  219 	.db #0x01	; 1
   00A0 01                  220 	.db #0x01	; 1
   00A1 01                  221 	.db #0x01	; 1
   00A2 00                  222 	.db #0x00	; 0
   00A3 01                  223 	.db #0x01	; 1
   00A4 01                  224 	.db #0x01	; 1
   00A5 01                  225 	.db #0x01	; 1
   00A6 01                  226 	.db #0x01	; 1
   00A7 01                  227 	.db #0x01	; 1
   00A8 01                  228 	.db #0x01	; 1
   00A9 00                  229 	.db #0x00	; 0
   00AA 01                  230 	.db #0x01	; 1
   00AB 01                  231 	.db #0x01	; 1
   00AC 01                  232 	.db #0x01	; 1
   00AD 00                  233 	.db #0x00	; 0
   00AE 00                  234 	.db #0x00	; 0
   00AF 00                  235 	.db #0x00	; 0
   00B0 00                  236 	.db #0x00	; 0
   00B1 00                  237 	.db #0x00	; 0
   00B2 00                  238 	.db #0x00	; 0
   00B3 01                  239 	.db #0x01	; 1
   00B4 01                  240 	.db #0x01	; 1
   00B5 01                  241 	.db #0x01	; 1
   00B6 01                  242 	.db #0x01	; 1
   00B7 01                  243 	.db #0x01	; 1
   00B8 01                  244 	.db #0x01	; 1
   00B9 00                  245 	.db #0x00	; 0
   00BA 01                  246 	.db #0x01	; 1
   00BB 01                  247 	.db #0x01	; 1
   00BC 01                  248 	.db #0x01	; 1
   00BD 00                  249 	.db #0x00	; 0
   00BE 01                  250 	.db #0x01	; 1
   00BF 01                  251 	.db #0x01	; 1
   00C0 01                  252 	.db #0x01	; 1
   00C1 01                  253 	.db #0x01	; 1
   00C2 01                  254 	.db #0x01	; 1
   00C3 01                  255 	.db #0x01	; 1
   00C4 01                  256 	.db #0x01	; 1
   00C5                     257 _g_palette:
   00C5 00                  258 	.db #0x00	; 0
   00C6 1A                  259 	.db #0x1A	; 26
   00C7 06                  260 	.db #0x06	; 6
   00C8 12                  261 	.db #0x12	; 18
                            262 ;src/main.c:66: void menu(){
                            263 ;	---------------------------------
                            264 ; Function menu
                            265 ; ---------------------------------
   00C9                     266 _menu::
                            267 ;src/main.c:68: cpct_clearScreen(0);
   00C9 21 00 40      [10]  268 	ld	hl,#0x4000
   00CC E5            [11]  269 	push	hl
   00CD AF            [ 4]  270 	xor	a, a
   00CE F5            [11]  271 	push	af
   00CF 33            [ 6]  272 	inc	sp
   00D0 26 C0         [ 7]  273 	ld	h, #0xC0
   00D2 E5            [11]  274 	push	hl
   00D3 CDr00r00      [17]  275 	call	_cpct_memset
                            276 ;src/main.c:70: memptr = cpct_getScreenPtr(VMEM,20,10);
   00D6 21 14 0A      [10]  277 	ld	hl,#0x0A14
   00D9 E5            [11]  278 	push	hl
   00DA 21 00 C0      [10]  279 	ld	hl,#0xC000
   00DD E5            [11]  280 	push	hl
   00DE CDr00r00      [17]  281 	call	_cpct_getScreenPtr
                            282 ;src/main.c:71: cpct_drawStringM0("Super Menu",memptr,2,3);
   00E1 EB            [ 4]  283 	ex	de,hl
   00E2 01r1Er01      [10]  284 	ld	bc,#___str_0+0
   00E5 21 02 03      [10]  285 	ld	hl,#0x0302
   00E8 E5            [11]  286 	push	hl
   00E9 D5            [11]  287 	push	de
   00EA C5            [11]  288 	push	bc
   00EB CDr00r00      [17]  289 	call	_cpct_drawStringM0
   00EE 21 06 00      [10]  290 	ld	hl,#6
   00F1 39            [11]  291 	add	hl,sp
   00F2 F9            [ 6]  292 	ld	sp,hl
                            293 ;src/main.c:73: memptr = cpct_getScreenPtr(VMEM,18,180);
   00F3 21 12 B4      [10]  294 	ld	hl,#0xB412
   00F6 E5            [11]  295 	push	hl
   00F7 21 00 C0      [10]  296 	ld	hl,#0xC000
   00FA E5            [11]  297 	push	hl
   00FB CDr00r00      [17]  298 	call	_cpct_getScreenPtr
                            299 ;src/main.c:74: cpct_drawStringM0("Pulsa Intro",memptr,4,5);
   00FE EB            [ 4]  300 	ex	de,hl
   00FF 01r29r01      [10]  301 	ld	bc,#___str_1+0
   0102 21 04 05      [10]  302 	ld	hl,#0x0504
   0105 E5            [11]  303 	push	hl
   0106 D5            [11]  304 	push	de
   0107 C5            [11]  305 	push	bc
   0108 CDr00r00      [17]  306 	call	_cpct_drawStringM0
   010B 21 06 00      [10]  307 	ld	hl,#6
   010E 39            [11]  308 	add	hl,sp
   010F F9            [ 6]  309 	ld	sp,hl
                            310 ;src/main.c:76: do{
   0110                     311 00101$:
                            312 ;src/main.c:77: cpct_scanKeyboard_f();
   0110 CDr00r00      [17]  313 	call	_cpct_scanKeyboard_f
                            314 ;src/main.c:78: }while(!cpct_isKeyPressed(Key_Enter));
   0113 21 00 40      [10]  315 	ld	hl,#0x4000
   0116 CDr00r00      [17]  316 	call	_cpct_isKeyPressed
   0119 7D            [ 4]  317 	ld	a,l
   011A B7            [ 4]  318 	or	a, a
   011B 28 F3         [12]  319 	jr	Z,00101$
   011D C9            [10]  320 	ret
   011E                     321 ___str_0:
   011E 53 75 70 65 72 20   322 	.ascii "Super Menu"
        4D 65 6E 75
   0128 00                  323 	.db 0x00
   0129                     324 ___str_1:
   0129 50 75 6C 73 61 20   325 	.ascii "Pulsa Intro"
        49 6E 74 72 6F
   0134 00                  326 	.db 0x00
                            327 ;src/main.c:83: u8* checkCollisions(u8 pX, u8 pY, u8 eX, u8 eY, u8* dir, u8* atk){
                            328 ;	---------------------------------
                            329 ; Function checkCollisions
                            330 ; ---------------------------------
   0135                     331 _checkCollisions::
   0135 DD E5         [15]  332 	push	ix
   0137 DD 21 00 00   [14]  333 	ld	ix,#0
   013B DD 39         [15]  334 	add	ix,sp
                            335 ;src/main.c:86: if(eX - pX > -1 && eX - pX < 11)
   013D DD 4E 06      [19]  336 	ld	c,6 (ix)
   0140 06 00         [ 7]  337 	ld	b,#0x00
   0142 DD 6E 04      [19]  338 	ld	l,4 (ix)
   0145 26 00         [ 7]  339 	ld	h,#0x00
   0147 79            [ 4]  340 	ld	a,c
   0148 95            [ 4]  341 	sub	a, l
   0149 5F            [ 4]  342 	ld	e,a
   014A 78            [ 4]  343 	ld	a,b
   014B 9C            [ 4]  344 	sbc	a, h
   014C 57            [ 4]  345 	ld	d,a
                            346 ;src/main.c:84: if(atk >= 21)
   014D DD 7E 0A      [19]  347 	ld	a,10 (ix)
   0150 D6 15         [ 7]  348 	sub	a, #0x15
   0152 DD 7E 0B      [19]  349 	ld	a,11 (ix)
   0155 DE 00         [ 7]  350 	sbc	a, #0x00
   0157 38 4F         [12]  351 	jr	C,00116$
                            352 ;src/main.c:85: if(dir == 0)
   0159 DD 7E 09      [19]  353 	ld	a,9 (ix)
   015C DD B6 08      [19]  354 	or	a,8 (ix)
   015F 20 21         [12]  355 	jr	NZ,00110$
                            356 ;src/main.c:86: if(eX - pX > -1 && eX - pX < 11)
   0161 3E FF         [ 7]  357 	ld	a,#0xFF
   0163 BB            [ 4]  358 	cp	a, e
   0164 9A            [ 4]  359 	sbc	a, d
   0165 E2r6Ar01      [10]  360 	jp	PO, 00152$
   0168 EE 80         [ 7]  361 	xor	a, #0x80
   016A                     362 00152$:
   016A F2r7Dr01      [10]  363 	jp	P,00102$
   016D 7B            [ 4]  364 	ld	a,e
   016E D6 0B         [ 7]  365 	sub	a, #0x0B
   0170 7A            [ 4]  366 	ld	a,d
   0171 17            [ 4]  367 	rla
   0172 3F            [ 4]  368 	ccf
   0173 1F            [ 4]  369 	rra
   0174 DE 80         [ 7]  370 	sbc	a, #0x80
   0176 30 05         [12]  371 	jr	NC,00102$
                            372 ;src/main.c:87: return 1;
   0178 21 01 00      [10]  373 	ld	hl,#0x0001
   017B 18 49         [12]  374 	jr	00118$
   017D                     375 00102$:
                            376 ;src/main.c:89: return 0;
   017D 21 00 00      [10]  377 	ld	hl,#0x0000
   0180 18 44         [12]  378 	jr	00118$
   0182                     379 00110$:
                            380 ;src/main.c:91: if(pX - eX > -1 && pX - eX < 11)
   0182 BF            [ 4]  381 	cp	a, a
   0183 ED 42         [15]  382 	sbc	hl, bc
   0185 3E FF         [ 7]  383 	ld	a,#0xFF
   0187 BD            [ 4]  384 	cp	a, l
   0188 9C            [ 4]  385 	sbc	a, h
   0189 E2r8Er01      [10]  386 	jp	PO, 00153$
   018C EE 80         [ 7]  387 	xor	a, #0x80
   018E                     388 00153$:
   018E F2rA3r01      [10]  389 	jp	P,00106$
   0191 11 0B 80      [10]  390 	ld	de, #0x800B
   0194 29            [11]  391 	add	hl, hl
   0195 3F            [ 4]  392 	ccf
   0196 CB 1C         [ 8]  393 	rr	h
   0198 CB 1D         [ 8]  394 	rr	l
   019A ED 52         [15]  395 	sbc	hl, de
   019C 30 05         [12]  396 	jr	NC,00106$
                            397 ;src/main.c:92: return 1;
   019E 21 01 00      [10]  398 	ld	hl,#0x0001
   01A1 18 23         [12]  399 	jr	00118$
   01A3                     400 00106$:
                            401 ;src/main.c:94: return 0;
   01A3 21 00 00      [10]  402 	ld	hl,#0x0000
   01A6 18 1E         [12]  403 	jr	00118$
   01A8                     404 00116$:
                            405 ;src/main.c:96: if(eX - pX > 0 && eX - pX < 4)
   01A8 AF            [ 4]  406 	xor	a, a
   01A9 BB            [ 4]  407 	cp	a, e
   01AA 9A            [ 4]  408 	sbc	a, d
   01AB E2rB0r01      [10]  409 	jp	PO, 00154$
   01AE EE 80         [ 7]  410 	xor	a, #0x80
   01B0                     411 00154$:
   01B0 F2rC3r01      [10]  412 	jp	P,00117$
   01B3 7B            [ 4]  413 	ld	a,e
   01B4 D6 04         [ 7]  414 	sub	a, #0x04
   01B6 7A            [ 4]  415 	ld	a,d
   01B7 17            [ 4]  416 	rla
   01B8 3F            [ 4]  417 	ccf
   01B9 1F            [ 4]  418 	rra
   01BA DE 80         [ 7]  419 	sbc	a, #0x80
   01BC 30 05         [12]  420 	jr	NC,00117$
                            421 ;src/main.c:97: return 2;
   01BE 21 02 00      [10]  422 	ld	hl,#0x0002
   01C1 18 03         [12]  423 	jr	00118$
   01C3                     424 00117$:
                            425 ;src/main.c:99: return 0;
   01C3 21 00 00      [10]  426 	ld	hl,#0x0000
   01C6                     427 00118$:
   01C6 DD E1         [14]  428 	pop	ix
   01C8 C9            [10]  429 	ret
                            430 ;src/main.c:102: u8* checkSprite(u8* atk, u8* dir){
                            431 ;	---------------------------------
                            432 ; Function checkSprite
                            433 ; ---------------------------------
   01C9                     434 _checkSprite::
                            435 ;src/main.c:103: if(atk <= 20)
   01C9 3E 14         [ 7]  436 	ld	a,#0x14
   01CB FD 21 02 00   [14]  437 	ld	iy,#2
   01CF FD 39         [15]  438 	add	iy,sp
   01D1 FD BE 00      [19]  439 	cp	a, 0 (iy)
   01D4 3E 00         [ 7]  440 	ld	a,#0x00
   01D6 FD 9E 01      [19]  441 	sbc	a, 1 (iy)
   01D9 38 11         [12]  442 	jr	C,00108$
                            443 ;src/main.c:104: if(dir == 0)
   01DB 21 05 00      [10]  444 	ld	hl, #4+1
   01DE 39            [11]  445 	add	hl, sp
   01DF 7E            [ 7]  446 	ld	a, (hl)
   01E0 2B            [ 6]  447 	dec	hl
   01E1 B6            [ 7]  448 	or	a,(hl)
   01E2 20 04         [12]  449 	jr	NZ,00102$
                            450 ;src/main.c:105: return gladis_quieto_dcha;
   01E4 21r00r00      [10]  451 	ld	hl,#_gladis_quieto_dcha
   01E7 C9            [10]  452 	ret
   01E8                     453 00102$:
                            454 ;src/main.c:107: return gladis_quieto_izda;
   01E8 21r00r00      [10]  455 	ld	hl,#_gladis_quieto_izda
   01EB C9            [10]  456 	ret
   01EC                     457 00108$:
                            458 ;src/main.c:108: else if(dir == 0){
   01EC 21 05 00      [10]  459 	ld	hl, #4+1
   01EF 39            [11]  460 	add	hl, sp
   01F0 7E            [ 7]  461 	ld	a, (hl)
   01F1 2B            [ 6]  462 	dec	hl
   01F2 B6            [ 7]  463 	or	a,(hl)
   01F3 20 04         [12]  464 	jr	NZ,00105$
                            465 ;src/main.c:109: return gladis_atk_dcha;
   01F5 21r00r00      [10]  466 	ld	hl,#_gladis_atk_dcha
   01F8 C9            [10]  467 	ret
   01F9                     468 00105$:
                            469 ;src/main.c:111: return gladis_atk_izda;
   01F9 21r00r00      [10]  470 	ld	hl,#_gladis_atk_izda
   01FC C9            [10]  471 	ret
                            472 ;src/main.c:120: void drawMap(){
                            473 ;	---------------------------------
                            474 ; Function drawMap
                            475 ; ---------------------------------
   01FD                     476 _drawMap::
   01FD DD E5         [15]  477 	push	ix
   01FF DD 21 00 00   [14]  478 	ld	ix,#0
   0203 DD 39         [15]  479 	add	ix,sp
   0205 F5            [11]  480 	push	af
   0206 F5            [11]  481 	push	af
                            482 ;src/main.c:124: for(posY=0; posY<height;posY++){
   0207 0E 00         [ 7]  483 	ld	c,#0x00
   0209 1E 00         [ 7]  484 	ld	e,#0x00
                            485 ;src/main.c:125: for(posX=0; posX<width;posX++){
   020B                     486 00112$:
   020B DD 36 FE 00   [19]  487 	ld	-2 (ix),#0x00
   020F DD 36 FF 00   [19]  488 	ld	-1 (ix),#0x00
   0213                     489 00105$:
                            490 ;src/main.c:126: memptr = cpct_getScreenPtr(VMEM, posX*5, posY*20); 
   0213 C5            [11]  491 	push	bc
   0214 D5            [11]  492 	push	de
   0215 7B            [ 4]  493 	ld	a,e
   0216 F5            [11]  494 	push	af
   0217 33            [ 6]  495 	inc	sp
   0218 DD 7E FF      [19]  496 	ld	a,-1 (ix)
   021B F5            [11]  497 	push	af
   021C 33            [ 6]  498 	inc	sp
   021D 21 00 C0      [10]  499 	ld	hl,#0xC000
   0220 E5            [11]  500 	push	hl
   0221 CDr00r00      [17]  501 	call	_cpct_getScreenPtr
   0224 D1            [10]  502 	pop	de
   0225 C1            [10]  503 	pop	bc
   0226 33            [ 6]  504 	inc	sp
   0227 33            [ 6]  505 	inc	sp
   0228 E5            [11]  506 	push	hl
                            507 ;src/main.c:127: if(mapa[posY][posX] == 1){
   0229 69            [ 4]  508 	ld	l,c
   022A 26 00         [ 7]  509 	ld	h,#0x00
   022C 29            [11]  510 	add	hl, hl
   022D 29            [11]  511 	add	hl, hl
   022E 29            [11]  512 	add	hl, hl
   022F 29            [11]  513 	add	hl, hl
   0230 3Er25         [ 7]  514 	ld	a,#<(_mapa)
   0232 85            [ 4]  515 	add	a, l
   0233 6F            [ 4]  516 	ld	l,a
   0234 3Es00         [ 7]  517 	ld	a,#>(_mapa)
   0236 8C            [ 4]  518 	adc	a, h
   0237 67            [ 4]  519 	ld	h,a
   0238 7D            [ 4]  520 	ld	a,l
   0239 DD 86 FE      [19]  521 	add	a, -2 (ix)
   023C 6F            [ 4]  522 	ld	l,a
   023D 7C            [ 4]  523 	ld	a,h
   023E CE 00         [ 7]  524 	adc	a, #0x00
   0240 67            [ 4]  525 	ld	h,a
   0241 7E            [ 7]  526 	ld	a,(hl)
   0242 3D            [ 4]  527 	dec	a
   0243 20 1A         [12]  528 	jr	NZ,00106$
                            529 ;src/main.c:128: cpct_drawSolidBox(memptr, 3, 5, 20);
   0245 DD 56 FC      [19]  530 	ld	d,-4 (ix)
   0248 DD 46 FD      [19]  531 	ld	b,-3 (ix)
   024B C5            [11]  532 	push	bc
   024C D5            [11]  533 	push	de
   024D 21 05 14      [10]  534 	ld	hl,#0x1405
   0250 E5            [11]  535 	push	hl
   0251 3E 03         [ 7]  536 	ld	a,#0x03
   0253 F5            [11]  537 	push	af
   0254 33            [ 6]  538 	inc	sp
   0255 4A            [ 4]  539 	ld	c,d
   0256 C5            [11]  540 	push	bc
   0257 CDr00r00      [17]  541 	call	_cpct_drawSolidBox
   025A F1            [10]  542 	pop	af
   025B F1            [10]  543 	pop	af
   025C 33            [ 6]  544 	inc	sp
   025D D1            [10]  545 	pop	de
   025E C1            [10]  546 	pop	bc
   025F                     547 00106$:
                            548 ;src/main.c:125: for(posX=0; posX<width;posX++){
   025F DD 7E FF      [19]  549 	ld	a,-1 (ix)
   0262 C6 05         [ 7]  550 	add	a, #0x05
   0264 DD 77 FF      [19]  551 	ld	-1 (ix),a
   0267 DD 34 FE      [23]  552 	inc	-2 (ix)
   026A DD 7E FE      [19]  553 	ld	a,-2 (ix)
   026D D6 10         [ 7]  554 	sub	a, #0x10
   026F 38 A2         [12]  555 	jr	C,00105$
                            556 ;src/main.c:124: for(posY=0; posY<height;posY++){
   0271 7B            [ 4]  557 	ld	a,e
   0272 C6 14         [ 7]  558 	add	a, #0x14
   0274 5F            [ 4]  559 	ld	e,a
   0275 0C            [ 4]  560 	inc	c
   0276 79            [ 4]  561 	ld	a,c
   0277 D6 0A         [ 7]  562 	sub	a, #0x0A
   0279 38 90         [12]  563 	jr	C,00112$
   027B DD F9         [10]  564 	ld	sp, ix
   027D DD E1         [14]  565 	pop	ix
   027F C9            [10]  566 	ret
                            567 ;src/main.c:138: void game(){
                            568 ;	---------------------------------
                            569 ; Function game
                            570 ; ---------------------------------
   0280                     571 _game::
   0280 DD E5         [15]  572 	push	ix
   0282 DD 21 00 00   [14]  573 	ld	ix,#0
   0286 DD 39         [15]  574 	add	ix,sp
   0288 21 E4 FF      [10]  575 	ld	hl,#-28
   028B 39            [11]  576 	add	hl,sp
   028C F9            [ 6]  577 	ld	sp,hl
                            578 ;src/main.c:139: TPlayer p = { 0,100 };
   028D 21 00 00      [10]  579 	ld	hl,#0x0000
   0290 39            [11]  580 	add	hl,sp
   0291 36 00         [10]  581 	ld	(hl),#0x00
   0293 21 00 00      [10]  582 	ld	hl,#0x0000
   0296 39            [11]  583 	add	hl,sp
   0297 DD 75 FC      [19]  584 	ld	-4 (ix),l
   029A DD 74 FD      [19]  585 	ld	-3 (ix),h
   029D DD 7E FC      [19]  586 	ld	a,-4 (ix)
   02A0 C6 01         [ 7]  587 	add	a, #0x01
   02A2 DD 77 F9      [19]  588 	ld	-7 (ix),a
   02A5 DD 7E FD      [19]  589 	ld	a,-3 (ix)
   02A8 CE 00         [ 7]  590 	adc	a, #0x00
   02AA DD 77 FA      [19]  591 	ld	-6 (ix),a
   02AD DD 6E F9      [19]  592 	ld	l,-7 (ix)
   02B0 DD 66 FA      [19]  593 	ld	h,-6 (ix)
   02B3 36 64         [10]  594 	ld	(hl),#0x64
                            595 ;src/main.c:140: TEnemy  e = { 55,100,0 };
   02B5 21 02 00      [10]  596 	ld	hl,#0x0002
   02B8 39            [11]  597 	add	hl,sp
   02B9 36 37         [10]  598 	ld	(hl),#0x37
   02BB 21 02 00      [10]  599 	ld	hl,#0x0002
   02BE 39            [11]  600 	add	hl,sp
   02BF DD 75 FE      [19]  601 	ld	-2 (ix),l
   02C2 DD 74 FF      [19]  602 	ld	-1 (ix),h
   02C5 DD 7E FE      [19]  603 	ld	a,-2 (ix)
   02C8 C6 01         [ 7]  604 	add	a, #0x01
   02CA DD 77 F6      [19]  605 	ld	-10 (ix),a
   02CD DD 7E FF      [19]  606 	ld	a,-1 (ix)
   02D0 CE 00         [ 7]  607 	adc	a, #0x00
   02D2 DD 77 F7      [19]  608 	ld	-9 (ix),a
   02D5 DD 6E F6      [19]  609 	ld	l,-10 (ix)
   02D8 DD 66 F7      [19]  610 	ld	h,-9 (ix)
   02DB 36 64         [10]  611 	ld	(hl),#0x64
   02DD DD 7E FE      [19]  612 	ld	a,-2 (ix)
   02E0 C6 02         [ 7]  613 	add	a, #0x02
   02E2 DD 77 F1      [19]  614 	ld	-15 (ix),a
   02E5 DD 7E FF      [19]  615 	ld	a,-1 (ix)
   02E8 CE 00         [ 7]  616 	adc	a, #0x00
   02EA DD 77 F2      [19]  617 	ld	-14 (ix),a
   02ED DD 6E F1      [19]  618 	ld	l,-15 (ix)
   02F0 DD 66 F2      [19]  619 	ld	h,-14 (ix)
   02F3 36 00         [10]  620 	ld	(hl),#0x00
                            621 ;src/main.c:143: u8* dir = 0;
   02F5 DD 36 EF 00   [19]  622 	ld	-17 (ix),#0x00
   02F9 DD 36 F0 00   [19]  623 	ld	-16 (ix),#0x00
                            624 ;src/main.c:144: u8* atk = 20;
   02FD DD 36 ED 14   [19]  625 	ld	-19 (ix),#0x14
   0301 DD 36 EE 00   [19]  626 	ld	-18 (ix),#0x00
                            627 ;src/main.c:145: u8* col = 0;
   0305 DD 36 EB 00   [19]  628 	ld	-21 (ix),#0x00
   0309 DD 36 EC 00   [19]  629 	ld	-20 (ix),#0x00
                            630 ;src/main.c:146: u8* rebote = 6;
   030D DD 36 E9 06   [19]  631 	ld	-23 (ix),#0x06
   0311 DD 36 EA 00   [19]  632 	ld	-22 (ix),#0x00
                            633 ;src/main.c:148: cpct_clearScreen(0);
   0315 21 00 40      [10]  634 	ld	hl,#0x4000
   0318 E5            [11]  635 	push	hl
   0319 AF            [ 4]  636 	xor	a, a
   031A F5            [11]  637 	push	af
   031B 33            [ 6]  638 	inc	sp
   031C 26 C0         [ 7]  639 	ld	h, #0xC0
   031E E5            [11]  640 	push	hl
   031F CDr00r00      [17]  641 	call	_cpct_memset
                            642 ;src/main.c:149: drawMap();
   0322 CDrFDr01      [17]  643 	call	_drawMap
                            644 ;src/main.c:150: while (1){
   0325                     645 00154$:
                            646 ;src/main.c:153: cpct_waitVSYNC();
   0325 CDr00r00      [17]  647 	call	_cpct_waitVSYNC
                            648 ;src/main.c:156: memptr = cpct_getScreenPtr(VMEM,p.x,p.y);
   0328 DD 6E F9      [19]  649 	ld	l,-7 (ix)
   032B DD 66 FA      [19]  650 	ld	h,-6 (ix)
   032E 46            [ 7]  651 	ld	b,(hl)
   032F DD 6E FC      [19]  652 	ld	l,-4 (ix)
   0332 DD 66 FD      [19]  653 	ld	h,-3 (ix)
   0335 4E            [ 7]  654 	ld	c, (hl)
   0336 C5            [11]  655 	push	bc
   0337 21 00 C0      [10]  656 	ld	hl,#0xC000
   033A E5            [11]  657 	push	hl
   033B CDr00r00      [17]  658 	call	_cpct_getScreenPtr
                            659 ;src/main.c:158: cpct_drawSolidBox(memptr,0,4,16);
   033E 4D            [ 4]  660 	ld	c, l
   033F 44            [ 4]  661 	ld	b, h
                            662 ;src/main.c:157: if(atk <= 20)
   0340 3E 14         [ 7]  663 	ld	a,#0x14
   0342 DD BE ED      [19]  664 	cp	a, -19 (ix)
   0345 3E 00         [ 7]  665 	ld	a,#0x00
   0347 DD 9E EE      [19]  666 	sbc	a, -18 (ix)
   034A 38 10         [12]  667 	jr	C,00102$
                            668 ;src/main.c:158: cpct_drawSolidBox(memptr,0,4,16);
   034C 21 04 10      [10]  669 	ld	hl,#0x1004
   034F E5            [11]  670 	push	hl
   0350 AF            [ 4]  671 	xor	a, a
   0351 F5            [11]  672 	push	af
   0352 33            [ 6]  673 	inc	sp
   0353 C5            [11]  674 	push	bc
   0354 CDr00r00      [17]  675 	call	_cpct_drawSolidBox
   0357 F1            [10]  676 	pop	af
   0358 F1            [10]  677 	pop	af
   0359 33            [ 6]  678 	inc	sp
   035A 18 0E         [12]  679 	jr	00103$
   035C                     680 00102$:
                            681 ;src/main.c:160: cpct_drawSolidBox(memptr,0,5,16);
   035C 21 05 10      [10]  682 	ld	hl,#0x1005
   035F E5            [11]  683 	push	hl
   0360 AF            [ 4]  684 	xor	a, a
   0361 F5            [11]  685 	push	af
   0362 33            [ 6]  686 	inc	sp
   0363 C5            [11]  687 	push	bc
   0364 CDr00r00      [17]  688 	call	_cpct_drawSolidBox
   0367 F1            [10]  689 	pop	af
   0368 F1            [10]  690 	pop	af
   0369 33            [ 6]  691 	inc	sp
   036A                     692 00103$:
                            693 ;src/main.c:162: memptr = cpct_getScreenPtr(VMEM,e.x,e.y);
   036A DD 6E F6      [19]  694 	ld	l,-10 (ix)
   036D DD 66 F7      [19]  695 	ld	h,-9 (ix)
   0370 46            [ 7]  696 	ld	b,(hl)
   0371 DD 6E FE      [19]  697 	ld	l,-2 (ix)
   0374 DD 66 FF      [19]  698 	ld	h,-1 (ix)
   0377 4E            [ 7]  699 	ld	c, (hl)
   0378 C5            [11]  700 	push	bc
   0379 21 00 C0      [10]  701 	ld	hl,#0xC000
   037C E5            [11]  702 	push	hl
   037D CDr00r00      [17]  703 	call	_cpct_getScreenPtr
   0380 EB            [ 4]  704 	ex	de,hl
                            705 ;src/main.c:163: if(e.vivo == 0)
   0381 DD 6E F1      [19]  706 	ld	l,-15 (ix)
   0384 DD 66 F2      [19]  707 	ld	h,-14 (ix)
   0387 7E            [ 7]  708 	ld	a,(hl)
   0388 B7            [ 4]  709 	or	a, a
   0389 20 0E         [12]  710 	jr	NZ,00105$
                            711 ;src/main.c:164: cpct_drawSolidBox(memptr,0,4,16);
   038B 21 04 10      [10]  712 	ld	hl,#0x1004
   038E E5            [11]  713 	push	hl
   038F AF            [ 4]  714 	xor	a, a
   0390 F5            [11]  715 	push	af
   0391 33            [ 6]  716 	inc	sp
   0392 D5            [11]  717 	push	de
   0393 CDr00r00      [17]  718 	call	_cpct_drawSolidBox
   0396 F1            [10]  719 	pop	af
   0397 F1            [10]  720 	pop	af
   0398 33            [ 6]  721 	inc	sp
   0399                     722 00105$:
                            723 ;src/main.c:167: if(col != 2){
   0399 DD 7E EB      [19]  724 	ld	a,-21 (ix)
   039C D6 02         [ 7]  725 	sub	a, #0x02
   039E 20 0A         [12]  726 	jr	NZ,00265$
   03A0 DD 7E EC      [19]  727 	ld	a,-20 (ix)
   03A3 B7            [ 4]  728 	or	a, a
   03A4 20 04         [12]  729 	jr	NZ,00265$
   03A6 3E 01         [ 7]  730 	ld	a,#0x01
   03A8 18 01         [12]  731 	jr	00266$
   03AA                     732 00265$:
   03AA AF            [ 4]  733 	xor	a,a
   03AB                     734 00266$:
   03AB DD 77 F3      [19]  735 	ld	-13 (ix), a
   03AE B7            [ 4]  736 	or	a, a
   03AF C2rBBr04      [10]  737 	jp	NZ,00138$
                            738 ;src/main.c:168: cpct_scanKeyboard_f();
   03B2 CDr00r00      [17]  739 	call	_cpct_scanKeyboard_f
                            740 ;src/main.c:169: if(cpct_isKeyPressed(Key_Space) && atk >= 20){
   03B5 21 05 80      [10]  741 	ld	hl,#0x8005
   03B8 CDr00r00      [17]  742 	call	_cpct_isKeyPressed
   03BB DD 75 F8      [19]  743 	ld	-8 (ix),l
   03BE DD 7E ED      [19]  744 	ld	a,-19 (ix)
   03C1 D6 14         [ 7]  745 	sub	a, #0x14
   03C3 DD 7E EE      [19]  746 	ld	a,-18 (ix)
   03C6 DE 00         [ 7]  747 	sbc	a, #0x00
   03C8 3E 00         [ 7]  748 	ld	a,#0x00
   03CA 17            [ 4]  749 	rla
   03CB DD 77 FB      [19]  750 	ld	-5 (ix),a
                            751 ;src/main.c:173: atk += 1;
   03CE DD 7E ED      [19]  752 	ld	a,-19 (ix)
   03D1 C6 01         [ 7]  753 	add	a, #0x01
   03D3 DD 77 F4      [19]  754 	ld	-12 (ix),a
   03D6 DD 7E EE      [19]  755 	ld	a,-18 (ix)
   03D9 CE 00         [ 7]  756 	adc	a, #0x00
   03DB DD 77 F5      [19]  757 	ld	-11 (ix),a
                            758 ;src/main.c:169: if(cpct_isKeyPressed(Key_Space) && atk >= 20){
   03DE DD 7E F8      [19]  759 	ld	a,-8 (ix)
   03E1 B7            [ 4]  760 	or	a, a
   03E2 28 53         [12]  761 	jr	Z,00132$
   03E4 DD 7E FB      [19]  762 	ld	a,-5 (ix)
   03E7 B7            [ 4]  763 	or	a, a
   03E8 20 4D         [12]  764 	jr	NZ,00132$
                            765 ;src/main.c:170: if(atk >= 50)
   03EA DD 7E ED      [19]  766 	ld	a,-19 (ix)
   03ED D6 32         [ 7]  767 	sub	a, #0x32
   03EF DD 7E EE      [19]  768 	ld	a,-18 (ix)
   03F2 DE 00         [ 7]  769 	sbc	a, #0x00
   03F4 38 0A         [12]  770 	jr	C,00107$
                            771 ;src/main.c:171: atk = 0;
   03F6 DD 36 ED 00   [19]  772 	ld	-19 (ix),#0x00
   03FA DD 36 EE 00   [19]  773 	ld	-18 (ix),#0x00
   03FE 18 0C         [12]  774 	jr	00108$
   0400                     775 00107$:
                            776 ;src/main.c:173: atk += 1;
   0400 DD 7E F4      [19]  777 	ld	a,-12 (ix)
   0403 DD 77 ED      [19]  778 	ld	-19 (ix),a
   0406 DD 7E F5      [19]  779 	ld	a,-11 (ix)
   0409 DD 77 EE      [19]  780 	ld	-18 (ix),a
   040C                     781 00108$:
                            782 ;src/main.c:174: if(cpct_isKeyPressed(Key_CursorRight))
   040C 21 00 02      [10]  783 	ld	hl,#0x0200
   040F CDr00r00      [17]  784 	call	_cpct_isKeyPressed
   0412 7D            [ 4]  785 	ld	a,l
   0413 B7            [ 4]  786 	or	a, a
   0414 28 0B         [12]  787 	jr	Z,00112$
                            788 ;src/main.c:175: dir = 0;
   0416 DD 36 EF 00   [19]  789 	ld	-17 (ix),#0x00
   041A DD 36 F0 00   [19]  790 	ld	-16 (ix),#0x00
   041E C3rEDr04      [10]  791 	jp	00139$
   0421                     792 00112$:
                            793 ;src/main.c:176: else if(cpct_isKeyPressed(Key_CursorLeft))
   0421 21 01 01      [10]  794 	ld	hl,#0x0101
   0424 CDr00r00      [17]  795 	call	_cpct_isKeyPressed
   0427 7D            [ 4]  796 	ld	a,l
   0428 B7            [ 4]  797 	or	a, a
   0429 CArEDr04      [10]  798 	jp	Z,00139$
                            799 ;src/main.c:177: dir = 1;
   042C DD 36 EF 01   [19]  800 	ld	-17 (ix),#0x01
   0430 DD 36 F0 00   [19]  801 	ld	-16 (ix),#0x00
   0434 C3rEDr04      [10]  802 	jp	00139$
   0437                     803 00132$:
                            804 ;src/main.c:179: if(atk < 20)
   0437 DD 7E FB      [19]  805 	ld	a,-5 (ix)
   043A B7            [ 4]  806 	or	a, a
   043B 28 0E         [12]  807 	jr	Z,00115$
                            808 ;src/main.c:180: atk += 1;
   043D DD 7E F4      [19]  809 	ld	a,-12 (ix)
   0440 DD 77 ED      [19]  810 	ld	-19 (ix),a
   0443 DD 7E F5      [19]  811 	ld	a,-11 (ix)
   0446 DD 77 EE      [19]  812 	ld	-18 (ix),a
   0449 18 08         [12]  813 	jr	00116$
   044B                     814 00115$:
                            815 ;src/main.c:182: atk = 20;
   044B DD 36 ED 14   [19]  816 	ld	-19 (ix),#0x14
   044F DD 36 EE 00   [19]  817 	ld	-18 (ix),#0x00
   0453                     818 00116$:
                            819 ;src/main.c:183: if(cpct_isKeyPressed(Key_CursorRight) && p.x < 76 ){
   0453 21 00 02      [10]  820 	ld	hl,#0x0200
   0456 CDr00r00      [17]  821 	call	_cpct_isKeyPressed
   0459 7D            [ 4]  822 	ld	a,l
   045A B7            [ 4]  823 	or	a, a
   045B 28 24         [12]  824 	jr	Z,00128$
   045D DD 6E FC      [19]  825 	ld	l,-4 (ix)
   0460 DD 66 FD      [19]  826 	ld	h,-3 (ix)
   0463 56            [ 7]  827 	ld	d,(hl)
   0464 7A            [ 4]  828 	ld	a,d
   0465 D6 4C         [ 7]  829 	sub	a, #0x4C
   0467 30 18         [12]  830 	jr	NC,00128$
                            831 ;src/main.c:184: if(col != 2)
   0469 DD 7E F3      [19]  832 	ld	a,-13 (ix)
   046C B7            [ 4]  833 	or	a, a
   046D 20 08         [12]  834 	jr	NZ,00118$
                            835 ;src/main.c:185: p.x += 1;
   046F 14            [ 4]  836 	inc	d
   0470 DD 6E FC      [19]  837 	ld	l,-4 (ix)
   0473 DD 66 FD      [19]  838 	ld	h,-3 (ix)
   0476 72            [ 7]  839 	ld	(hl),d
   0477                     840 00118$:
                            841 ;src/main.c:186: dir = 0;
   0477 DD 36 EF 00   [19]  842 	ld	-17 (ix),#0x00
   047B DD 36 F0 00   [19]  843 	ld	-16 (ix),#0x00
   047F 18 6C         [12]  844 	jr	00139$
   0481                     845 00128$:
                            846 ;src/main.c:187: }else if(cpct_isKeyPressed(Key_CursorLeft) && p.x > 0 ){
   0481 21 01 01      [10]  847 	ld	hl,#0x0101
   0484 CDr00r00      [17]  848 	call	_cpct_isKeyPressed
   0487 7D            [ 4]  849 	ld	a,l
   0488 B7            [ 4]  850 	or	a, a
   0489 28 23         [12]  851 	jr	Z,00124$
   048B DD 6E FC      [19]  852 	ld	l,-4 (ix)
   048E DD 66 FD      [19]  853 	ld	h,-3 (ix)
   0491 56            [ 7]  854 	ld	d,(hl)
   0492 7A            [ 4]  855 	ld	a,d
   0493 B7            [ 4]  856 	or	a, a
   0494 28 18         [12]  857 	jr	Z,00124$
                            858 ;src/main.c:188: if(col != 2)
   0496 DD 7E F3      [19]  859 	ld	a,-13 (ix)
   0499 B7            [ 4]  860 	or	a, a
   049A 20 08         [12]  861 	jr	NZ,00120$
                            862 ;src/main.c:189: p.x -= 1;
   049C 15            [ 4]  863 	dec	d
   049D DD 6E FC      [19]  864 	ld	l,-4 (ix)
   04A0 DD 66 FD      [19]  865 	ld	h,-3 (ix)
   04A3 72            [ 7]  866 	ld	(hl),d
   04A4                     867 00120$:
                            868 ;src/main.c:190: dir = 1;
   04A4 DD 36 EF 01   [19]  869 	ld	-17 (ix),#0x01
   04A8 DD 36 F0 00   [19]  870 	ld	-16 (ix),#0x00
   04AC 18 3F         [12]  871 	jr	00139$
   04AE                     872 00124$:
                            873 ;src/main.c:191: }else  if(cpct_isKeyPressed(Key_Esc)){
   04AE 21 08 04      [10]  874 	ld	hl,#0x0408
   04B1 CDr00r00      [17]  875 	call	_cpct_isKeyPressed
   04B4 7D            [ 4]  876 	ld	a,l
   04B5 B7            [ 4]  877 	or	a, a
   04B6 28 35         [12]  878 	jr	Z,00139$
                            879 ;src/main.c:192: return;
   04B8 C3r85r06      [10]  880 	jp	00159$
   04BB                     881 00138$:
                            882 ;src/main.c:196: p.x -= 2;
   04BB DD 6E FC      [19]  883 	ld	l,-4 (ix)
   04BE DD 66 FD      [19]  884 	ld	h,-3 (ix)
   04C1 7E            [ 7]  885 	ld	a,(hl)
   04C2 C6 FE         [ 7]  886 	add	a,#0xFE
   04C4 DD 6E FC      [19]  887 	ld	l,-4 (ix)
   04C7 DD 66 FD      [19]  888 	ld	h,-3 (ix)
   04CA 77            [ 7]  889 	ld	(hl),a
                            890 ;src/main.c:197: rebote -= 2;
   04CB DD 5E E9      [19]  891 	ld	e,-23 (ix)
   04CE DD 56 EA      [19]  892 	ld	d,-22 (ix)
   04D1 1B            [ 6]  893 	dec	de
   04D2 1B            [ 6]  894 	dec	de
   04D3 DD 73 E9      [19]  895 	ld	-23 (ix),e
   04D6 DD 72 EA      [19]  896 	ld	-22 (ix),d
                            897 ;src/main.c:198: if(rebote == 0){
   04D9 7A            [ 4]  898 	ld	a,d
   04DA B3            [ 4]  899 	or	a,e
   04DB 20 10         [12]  900 	jr	NZ,00139$
                            901 ;src/main.c:199: rebote = 6;
   04DD DD 36 E9 06   [19]  902 	ld	-23 (ix),#0x06
   04E1 DD 36 EA 00   [19]  903 	ld	-22 (ix),#0x00
                            904 ;src/main.c:200: col = 0;
   04E5 DD 36 EB 00   [19]  905 	ld	-21 (ix),#0x00
   04E9 DD 36 EC 00   [19]  906 	ld	-20 (ix),#0x00
   04ED                     907 00139$:
                            908 ;src/main.c:205: sprite = checkSprite(atk,dir);
   04ED DD 6E EF      [19]  909 	ld	l,-17 (ix)
   04F0 DD 66 F0      [19]  910 	ld	h,-16 (ix)
   04F3 E5            [11]  911 	push	hl
   04F4 DD 6E ED      [19]  912 	ld	l,-19 (ix)
   04F7 DD 66 EE      [19]  913 	ld	h,-18 (ix)
   04FA E5            [11]  914 	push	hl
   04FB CDrC9r01      [17]  915 	call	_checkSprite
   04FE F1            [10]  916 	pop	af
   04FF F1            [10]  917 	pop	af
   0500 4D            [ 4]  918 	ld	c, l
   0501 44            [ 4]  919 	ld	b, h
                            920 ;src/main.c:207: if(col != 2 && e.vivo == 0)
   0502 DD 7E EB      [19]  921 	ld	a,-21 (ix)
   0505 D6 02         [ 7]  922 	sub	a, #0x02
   0507 20 06         [12]  923 	jr	NZ,00267$
   0509 DD 7E EC      [19]  924 	ld	a,-20 (ix)
   050C B7            [ 4]  925 	or	a, a
   050D 28 58         [12]  926 	jr	Z,00141$
   050F                     927 00267$:
   050F DD 6E F1      [19]  928 	ld	l,-15 (ix)
   0512 DD 66 F2      [19]  929 	ld	h,-14 (ix)
   0515 7E            [ 7]  930 	ld	a,(hl)
   0516 B7            [ 4]  931 	or	a, a
   0517 20 4E         [12]  932 	jr	NZ,00141$
                            933 ;src/main.c:208: col = checkCollisions(p.x,p.y,e.x,e.y,dir,atk);
   0519 DD 6E F6      [19]  934 	ld	l,-10 (ix)
   051C DD 66 F7      [19]  935 	ld	h,-9 (ix)
   051F 5E            [ 7]  936 	ld	e,(hl)
   0520 DD 6E FE      [19]  937 	ld	l,-2 (ix)
   0523 DD 66 FF      [19]  938 	ld	h,-1 (ix)
   0526 7E            [ 7]  939 	ld	a,(hl)
   0527 DD 77 F4      [19]  940 	ld	-12 (ix),a
   052A DD 6E F9      [19]  941 	ld	l,-7 (ix)
   052D DD 66 FA      [19]  942 	ld	h,-6 (ix)
   0530 7E            [ 7]  943 	ld	a,(hl)
   0531 DD 77 FB      [19]  944 	ld	-5 (ix),a
   0534 DD 6E FC      [19]  945 	ld	l,-4 (ix)
   0537 DD 66 FD      [19]  946 	ld	h,-3 (ix)
   053A 56            [ 7]  947 	ld	d,(hl)
   053B C5            [11]  948 	push	bc
   053C DD 6E ED      [19]  949 	ld	l,-19 (ix)
   053F DD 66 EE      [19]  950 	ld	h,-18 (ix)
   0542 E5            [11]  951 	push	hl
   0543 DD 6E EF      [19]  952 	ld	l,-17 (ix)
   0546 DD 66 F0      [19]  953 	ld	h,-16 (ix)
   0549 E5            [11]  954 	push	hl
   054A 7B            [ 4]  955 	ld	a,e
   054B F5            [11]  956 	push	af
   054C 33            [ 6]  957 	inc	sp
   054D DD 7E F4      [19]  958 	ld	a,-12 (ix)
   0550 F5            [11]  959 	push	af
   0551 33            [ 6]  960 	inc	sp
   0552 DD 7E FB      [19]  961 	ld	a,-5 (ix)
   0555 F5            [11]  962 	push	af
   0556 33            [ 6]  963 	inc	sp
   0557 D5            [11]  964 	push	de
   0558 33            [ 6]  965 	inc	sp
   0559 CDr35r01      [17]  966 	call	_checkCollisions
   055C F1            [10]  967 	pop	af
   055D F1            [10]  968 	pop	af
   055E F1            [10]  969 	pop	af
   055F F1            [10]  970 	pop	af
   0560 C1            [10]  971 	pop	bc
   0561 DD 75 EB      [19]  972 	ld	-21 (ix),l
   0564 DD 74 EC      [19]  973 	ld	-20 (ix),h
   0567                     974 00141$:
                            975 ;src/main.c:209: if(col == 1)
   0567 DD 7E EB      [19]  976 	ld	a,-21 (ix)
   056A 3D            [ 4]  977 	dec	a
   056B 20 0E         [12]  978 	jr	NZ,00144$
   056D DD 7E EC      [19]  979 	ld	a,-20 (ix)
   0570 B7            [ 4]  980 	or	a, a
   0571 20 08         [12]  981 	jr	NZ,00144$
                            982 ;src/main.c:210: e.vivo = 1;
   0573 DD 6E F1      [19]  983 	ld	l,-15 (ix)
   0576 DD 66 F2      [19]  984 	ld	h,-14 (ix)
   0579 36 01         [10]  985 	ld	(hl),#0x01
   057B                     986 00144$:
                            987 ;src/main.c:213: memptr = cpct_getScreenPtr(VMEM,p.x,p.y);
   057B DD 6E F9      [19]  988 	ld	l,-7 (ix)
   057E DD 66 FA      [19]  989 	ld	h,-6 (ix)
   0581 56            [ 7]  990 	ld	d,(hl)
   0582 DD 6E FC      [19]  991 	ld	l,-4 (ix)
   0585 DD 66 FD      [19]  992 	ld	h,-3 (ix)
   0588 7E            [ 7]  993 	ld	a,(hl)
   0589 C5            [11]  994 	push	bc
   058A D5            [11]  995 	push	de
   058B 33            [ 6]  996 	inc	sp
   058C F5            [11]  997 	push	af
   058D 33            [ 6]  998 	inc	sp
   058E 21 00 C0      [10]  999 	ld	hl,#0xC000
   0591 E5            [11] 1000 	push	hl
   0592 CDr00r00      [17] 1001 	call	_cpct_getScreenPtr
   0595 C1            [10] 1002 	pop	bc
                           1003 ;src/main.c:216: if(atk >= 21)
   0596 DD 7E ED      [19] 1004 	ld	a,-19 (ix)
   0599 D6 15         [ 7] 1005 	sub	a, #0x15
   059B DD 7E EE      [19] 1006 	ld	a,-18 (ix)
   059E DE 00         [ 7] 1007 	sbc	a, #0x00
   05A0 3E 00         [ 7] 1008 	ld	a,#0x00
   05A2 17            [ 4] 1009 	rla
   05A3 5F            [ 4] 1010 	ld	e,a
                           1011 ;src/main.c:158: cpct_drawSolidBox(memptr,0,4,16);
   05A4 DD 75 F4      [19] 1012 	ld	-12 (ix),l
   05A7 DD 74 F5      [19] 1013 	ld	-11 (ix),h
                           1014 ;src/main.c:217: cpct_drawSpriteMasked(sprite, memptr, 5, 16);
                           1015 ;src/main.c:216: if(atk >= 21)
   05AA 7B            [ 4] 1016 	ld	a,e
   05AB B7            [ 4] 1017 	or	a, a
   05AC 20 13         [12] 1018 	jr	NZ,00146$
                           1019 ;src/main.c:217: cpct_drawSpriteMasked(sprite, memptr, 5, 16);
   05AE D5            [11] 1020 	push	de
   05AF 21 05 10      [10] 1021 	ld	hl,#0x1005
   05B2 E5            [11] 1022 	push	hl
   05B3 DD 6E F4      [19] 1023 	ld	l,-12 (ix)
   05B6 DD 66 F5      [19] 1024 	ld	h,-11 (ix)
   05B9 E5            [11] 1025 	push	hl
   05BA C5            [11] 1026 	push	bc
   05BB CDr00r00      [17] 1027 	call	_cpct_drawSpriteMasked
   05BE D1            [10] 1028 	pop	de
   05BF 18 11         [12] 1029 	jr	00147$
   05C1                    1030 00146$:
                           1031 ;src/main.c:219: cpct_drawSpriteMasked(sprite, memptr, 4, 16);
   05C1 D5            [11] 1032 	push	de
   05C2 21 04 10      [10] 1033 	ld	hl,#0x1004
   05C5 E5            [11] 1034 	push	hl
   05C6 DD 6E F4      [19] 1035 	ld	l,-12 (ix)
   05C9 DD 66 F5      [19] 1036 	ld	h,-11 (ix)
   05CC E5            [11] 1037 	push	hl
   05CD C5            [11] 1038 	push	bc
   05CE CDr00r00      [17] 1039 	call	_cpct_drawSpriteMasked
   05D1 D1            [10] 1040 	pop	de
   05D2                    1041 00147$:
                           1042 ;src/main.c:222: if(e.vivo == 0){
   05D2 DD 6E F1      [19] 1043 	ld	l,-15 (ix)
   05D5 DD 66 F2      [19] 1044 	ld	h,-14 (ix)
   05D8 7E            [ 7] 1045 	ld	a, (hl)
   05D9 B7            [ 4] 1046 	or	a, a
   05DA 20 2C         [12] 1047 	jr	NZ,00149$
                           1048 ;src/main.c:223: memptr = cpct_getScreenPtr(VMEM,e.x,e.y);
   05DC DD 6E F6      [19] 1049 	ld	l,-10 (ix)
   05DF DD 66 F7      [19] 1050 	ld	h,-9 (ix)
   05E2 46            [ 7] 1051 	ld	b,(hl)
   05E3 DD 6E FE      [19] 1052 	ld	l,-2 (ix)
   05E6 DD 66 FF      [19] 1053 	ld	h,-1 (ix)
   05E9 56            [ 7] 1054 	ld	d,(hl)
   05EA D5            [11] 1055 	push	de
   05EB 4A            [ 4] 1056 	ld	c, d
   05EC C5            [11] 1057 	push	bc
   05ED 21 00 C0      [10] 1058 	ld	hl,#0xC000
   05F0 E5            [11] 1059 	push	hl
   05F1 CDr00r00      [17] 1060 	call	_cpct_getScreenPtr
   05F4 D1            [10] 1061 	pop	de
                           1062 ;src/main.c:224: cpct_drawSolidBox(memptr, 18, 4, 16);
   05F5 4D            [ 4] 1063 	ld	c, l
   05F6 44            [ 4] 1064 	ld	b, h
   05F7 D5            [11] 1065 	push	de
   05F8 21 04 10      [10] 1066 	ld	hl,#0x1004
   05FB E5            [11] 1067 	push	hl
   05FC 3E 12         [ 7] 1068 	ld	a,#0x12
   05FE F5            [11] 1069 	push	af
   05FF 33            [ 6] 1070 	inc	sp
   0600 C5            [11] 1071 	push	bc
   0601 CDr00r00      [17] 1072 	call	_cpct_drawSolidBox
   0604 F1            [10] 1073 	pop	af
   0605 F1            [10] 1074 	pop	af
   0606 33            [ 6] 1075 	inc	sp
   0607 D1            [10] 1076 	pop	de
   0608                    1077 00149$:
                           1078 ;src/main.c:227: memptr = cpct_getScreenPtr(VMEM, 6, 10);
   0608 D5            [11] 1079 	push	de
   0609 21 06 0A      [10] 1080 	ld	hl,#0x0A06
   060C E5            [11] 1081 	push	hl
   060D 21 00 C0      [10] 1082 	ld	hl,#0xC000
   0610 E5            [11] 1083 	push	hl
   0611 CDr00r00      [17] 1084 	call	_cpct_getScreenPtr
   0614 D1            [10] 1085 	pop	de
                           1086 ;src/main.c:228: cpct_drawStringM0("FATIGA",memptr, 2, 0);
   0615 4D            [ 4] 1087 	ld	c, l
   0616 44            [ 4] 1088 	ld	b, h
   0617 D5            [11] 1089 	push	de
   0618 21 02 00      [10] 1090 	ld	hl,#0x0002
   061B E5            [11] 1091 	push	hl
   061C C5            [11] 1092 	push	bc
   061D 21r8Ar06      [10] 1093 	ld	hl,#___str_2
   0620 E5            [11] 1094 	push	hl
   0621 CDr00r00      [17] 1095 	call	_cpct_drawStringM0
   0624 21 06 00      [10] 1096 	ld	hl,#6
   0627 39            [11] 1097 	add	hl,sp
   0628 F9            [ 6] 1098 	ld	sp,hl
   0629 D1            [10] 1099 	pop	de
                           1100 ;src/main.c:230: if(atk >= 21)
   062A 7B            [ 4] 1101 	ld	a,e
                           1102 ;src/main.c:231: for(i=0; i<(*atk - 20)/10; i++){
   062B B7            [ 4] 1103 	or	a,a
   062C C2r25r03      [10] 1104 	jp	NZ,00154$
   062F 4F            [ 4] 1105 	ld	c,a
   0630                    1106 00157$:
   0630 DD 6E ED      [19] 1107 	ld	l,-19 (ix)
   0633 DD 66 EE      [19] 1108 	ld	h,-18 (ix)
   0636 7E            [ 7] 1109 	ld	a, (hl)
   0637 1E 00         [ 7] 1110 	ld	e, #0x00
   0639 C6 EC         [ 7] 1111 	add	a,#0xEC
   063B 6F            [ 4] 1112 	ld	l,a
   063C 7B            [ 4] 1113 	ld	a,e
   063D CE FF         [ 7] 1114 	adc	a,#0xFF
   063F 67            [ 4] 1115 	ld	h,a
   0640 C5            [11] 1116 	push	bc
   0641 11 0A 00      [10] 1117 	ld	de,#0x000A
   0644 D5            [11] 1118 	push	de
   0645 E5            [11] 1119 	push	hl
   0646 CDr00r00      [17] 1120 	call	__divsint
   0649 F1            [10] 1121 	pop	af
   064A F1            [10] 1122 	pop	af
   064B C1            [10] 1123 	pop	bc
   064C 51            [ 4] 1124 	ld	d,c
   064D 1E 00         [ 7] 1125 	ld	e,#0x00
   064F 7A            [ 4] 1126 	ld	a,d
   0650 95            [ 4] 1127 	sub	a, l
   0651 7B            [ 4] 1128 	ld	a,e
   0652 9C            [ 4] 1129 	sbc	a, h
   0653 E2r58r06      [10] 1130 	jp	PO, 00270$
   0656 EE 80         [ 7] 1131 	xor	a, #0x80
   0658                    1132 00270$:
   0658 F2r25r03      [10] 1133 	jp	P,00154$
                           1134 ;src/main.c:232: memptr = cpct_getScreenPtr(VMEM, 18+i*4, 10);
   065B 79            [ 4] 1135 	ld	a,c
   065C 87            [ 4] 1136 	add	a, a
   065D 87            [ 4] 1137 	add	a, a
   065E C6 12         [ 7] 1138 	add	a, #0x12
   0660 57            [ 4] 1139 	ld	d,a
   0661 C5            [11] 1140 	push	bc
   0662 3E 0A         [ 7] 1141 	ld	a,#0x0A
   0664 F5            [11] 1142 	push	af
   0665 33            [ 6] 1143 	inc	sp
   0666 D5            [11] 1144 	push	de
   0667 33            [ 6] 1145 	inc	sp
   0668 21 00 C0      [10] 1146 	ld	hl,#0xC000
   066B E5            [11] 1147 	push	hl
   066C CDr00r00      [17] 1148 	call	_cpct_getScreenPtr
   066F C1            [10] 1149 	pop	bc
                           1150 ;src/main.c:233: cpct_drawSolidBox(memptr, 18, 3, 10);
   0670 EB            [ 4] 1151 	ex	de,hl
   0671 C5            [11] 1152 	push	bc
   0672 21 03 0A      [10] 1153 	ld	hl,#0x0A03
   0675 E5            [11] 1154 	push	hl
   0676 3E 12         [ 7] 1155 	ld	a,#0x12
   0678 F5            [11] 1156 	push	af
   0679 33            [ 6] 1157 	inc	sp
   067A D5            [11] 1158 	push	de
   067B CDr00r00      [17] 1159 	call	_cpct_drawSolidBox
   067E F1            [10] 1160 	pop	af
   067F F1            [10] 1161 	pop	af
   0680 33            [ 6] 1162 	inc	sp
   0681 C1            [10] 1163 	pop	bc
                           1164 ;src/main.c:231: for(i=0; i<(*atk - 20)/10; i++){
   0682 0C            [ 4] 1165 	inc	c
   0683 18 AB         [12] 1166 	jr	00157$
   0685                    1167 00159$:
   0685 DD F9         [10] 1168 	ld	sp, ix
   0687 DD E1         [14] 1169 	pop	ix
   0689 C9            [10] 1170 	ret
   068A                    1171 ___str_2:
   068A 46 41 54 49 47 41  1172 	.ascii "FATIGA"
   0690 00                 1173 	.db 0x00
                           1174 ;src/main.c:240: void main(void) {
                           1175 ;	---------------------------------
                           1176 ; Function main
                           1177 ; ---------------------------------
   0691                    1178 _main::
                           1179 ;src/main.c:242: init();
   0691 CDr00r00      [17] 1180 	call	_init
                           1181 ;src/main.c:245: while(1){
   0694                    1182 00102$:
                           1183 ;src/main.c:246: menu();
   0694 CDrC9r00      [17] 1184 	call	_menu
                           1185 ;src/main.c:247: game();
   0697 CDr80r02      [17] 1186 	call	_game
   069A 18 F8         [12] 1187 	jr	00102$
                           1188 	.area _CODE
                           1189 	.area _INITIALIZER
                           1190 	.area _CABS (ABS)
